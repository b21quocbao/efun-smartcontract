/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AuthorizedReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizedReceiver__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "AuthorizedReceiverInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizedReceiverInterface__factory>;
    getContractFactory(
      name: "ChainlinkRequestInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkRequestInterface__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "OperatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "WithdrawalInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawalInterface__factory>;
    getContractFactory(
      name: "LinkTokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenReceiver__factory>;
    getContractFactory(
      name: "Operator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Operator__factory>;
    getContractFactory(
      name: "ChainlinkClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkClient__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ChainlinkRequestInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkRequestInterface__factory>;
    getContractFactory(
      name: "ENSInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSInterface__factory>;
    getContractFactory(
      name: "KeeperCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatibleInterface__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "OperatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "PointerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PointerInterface__factory>;
    getContractFactory(
      name: "KeeperBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperBase__factory>;
    getContractFactory(
      name: "KeeperCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatible__factory>;
    getContractFactory(
      name: "ENSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSResolver__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "APIConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.APIConsumer__factory>;
    getContractFactory(
      name: "ChainlinkClientUpgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkClientUpgradable__factory>;
    getContractFactory(
      name: "GroupPredict",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GroupPredict__factory>;
    getContractFactory(
      name: "Handicap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Handicap__factory>;
    getContractFactory(
      name: "HandicapGroupPredict",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandicapGroupPredict__factory>;
    getContractFactory(
      name: "MultipleChoices",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultipleChoices__factory>;
    getContractFactory(
      name: "OverUnder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OverUnder__factory>;
    getContractFactory(
      name: "ERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Token__factory>;
    getContractFactory(
      name: "Event",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Event__factory>;
    getContractFactory(
      name: "EventStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventStorage__factory>;
    getContractFactory(
      name: "EventStorageV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventStorageV2__factory>;
    getContractFactory(
      name: "IEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEvent__factory>;
    getContractFactory(
      name: "IHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHelper__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "ERC677Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Receiver__factory>;
    getContractFactory(
      name: "ERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Token__factory>;
    getContractFactory(
      name: "LinkToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkToken__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "Prediction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Prediction__factory>;

    getContractAt(
      name: "AuthorizedReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizedReceiver>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "AuthorizedReceiverInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizedReceiverInterface>;
    getContractAt(
      name: "ChainlinkRequestInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkRequestInterface>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "OperatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "WithdrawalInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawalInterface>;
    getContractAt(
      name: "LinkTokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenReceiver>;
    getContractAt(
      name: "Operator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Operator>;
    getContractAt(
      name: "ChainlinkClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkClient>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ChainlinkRequestInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkRequestInterface>;
    getContractAt(
      name: "ENSInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSInterface>;
    getContractAt(
      name: "KeeperCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatibleInterface>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "OperatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "PointerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PointerInterface>;
    getContractAt(
      name: "KeeperBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperBase>;
    getContractAt(
      name: "KeeperCompatible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatible>;
    getContractAt(
      name: "ENSResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSResolver>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "APIConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.APIConsumer>;
    getContractAt(
      name: "ChainlinkClientUpgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkClientUpgradable>;
    getContractAt(
      name: "GroupPredict",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GroupPredict>;
    getContractAt(
      name: "Handicap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Handicap>;
    getContractAt(
      name: "HandicapGroupPredict",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandicapGroupPredict>;
    getContractAt(
      name: "MultipleChoices",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultipleChoices>;
    getContractAt(
      name: "OverUnder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OverUnder>;
    getContractAt(
      name: "ERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Token>;
    getContractAt(
      name: "Event",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Event>;
    getContractAt(
      name: "EventStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventStorage>;
    getContractAt(
      name: "EventStorageV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventStorageV2>;
    getContractAt(
      name: "IEvent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEvent>;
    getContractAt(
      name: "IHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHelper>;
    getContractAt(
      name: "BasicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicToken>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Basic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "ERC677Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Receiver>;
    getContractAt(
      name: "ERC677Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Token>;
    getContractAt(
      name: "LinkToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkToken>;
    getContractAt(
      name: "StandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "Prediction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Prediction>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
