/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "MIMatch",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MIMatch__factory>;
    getContractFactory(
      name: "MiniMatch",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniMatch__factory>;
    getContractFactory(
      name: "MiniPrediction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniPrediction__factory>;
    getContractFactory(
      name: "SIMatchExt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SIMatchExt__factory>;
    getContractFactory(
      name: "SponsoredMatchLink",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SponsoredMatchLink__factory>;
    getContractFactory(
      name: "SponsoredPredictionLink",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SponsoredPredictionLink__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "MIMatch",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MIMatch>;
    getContractAt(
      name: "MiniMatch",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniMatch>;
    getContractAt(
      name: "MiniPrediction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniPrediction>;
    getContractAt(
      name: "SIMatchExt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SIMatchExt>;
    getContractAt(
      name: "SponsoredMatchLink",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SponsoredMatchLink>;
    getContractAt(
      name: "SponsoredPredictionLink",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SponsoredPredictionLink>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
