/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "GroupPredict",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GroupPredict__factory>;
    getContractFactory(
      name: "Handicap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Handicap__factory>;
    getContractFactory(
      name: "MultipleChoices",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultipleChoices__factory>;
    getContractFactory(
      name: "OverUnder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OverUnder__factory>;
    getContractFactory(
      name: "Event",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Event__factory>;
    getContractFactory(
      name: "IEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEvent__factory>;
    getContractFactory(
      name: "IHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHelper__factory>;
    getContractFactory(
      name: "Prediction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Prediction__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "GroupPredict",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GroupPredict>;
    getContractAt(
      name: "Handicap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Handicap>;
    getContractAt(
      name: "MultipleChoices",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultipleChoices>;
    getContractAt(
      name: "OverUnder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OverUnder>;
    getContractAt(
      name: "Event",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Event>;
    getContractAt(
      name: "IEvent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEvent>;
    getContractAt(
      name: "IHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHelper>;
    getContractAt(
      name: "Prediction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Prediction>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
