/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EventStorage,
  EventStorageInterface,
} from "../../../contracts/Event.sol/EventStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "events",
    outputs: [
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadlineTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "resultIndex",
        type: "uint256",
      },
      {
        internalType: "enum EDataTypes.EventStatus",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "helperAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "string",
        name: "_datas",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "pro",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isBlock",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "finalTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "claimTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "affiliate",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "hostFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nEvents",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610328806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630b7914301461003b578063bca321e514610071575b600080fd5b61004e6100493660046101a1565b610088565b6040516100689e9d9c9b9a99989796959493929190610204565b60405180910390f35b61007a60015481565b604051908152602001610068565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600787018054969795969495939460ff84169461010090940473ffffffffffffffffffffffffffffffffffffffff9081169493169291906100f1906102e0565b80601f016020809104026020016040519081016040528092919081815260200182805461011d906102e0565b801561016a5780601f1061013f5761010080835404028352916020019161016a565b820191906000526020600020905b81548152906001019060200180831161014d57829003601f168201915b5050505060088301546009840154600a850154600b860154600c870154600d909701549596939560ff93841695509193909216908e565b6000602082840312156101b2578081fd5b5035919050565b60008151808452815b818110156101de576020818501810151868301820152016101c2565b818111156101ef5782602083870101525b50601f01601f19169290920160200192915050565b8e81528d60208201528c60408201528b6060820152600060028c1061023757634e487b7160e01b81526021600452602481fd5b8b608083015261025f60a083018c73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff8a1660c08301526101c060e08301526102916101c083018a6101b9565b9050876101008301526102a961012083018815159052565b85610140830152846101608301526102c661018083018515159052565b826101a08301529f9e505050505050505050505050505050565b600181811c908216806102f457607f821691505b6020821081141561031557634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c6343000804000a";

type EventStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EventStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EventStorage__factory extends ContractFactory {
  constructor(...args: EventStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EventStorage> {
    return super.deploy(overrides || {}) as Promise<EventStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EventStorage {
    return super.attach(address) as EventStorage;
  }
  override connect(signer: Signer): EventStorage__factory {
    return super.connect(signer) as EventStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventStorageInterface {
    return new utils.Interface(_abi) as EventStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EventStorage {
    return new Contract(address, _abi, signerOrProvider) as EventStorage;
  }
}
