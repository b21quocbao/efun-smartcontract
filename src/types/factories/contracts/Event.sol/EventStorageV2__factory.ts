/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EventStorageV2,
  EventStorageV2Interface,
} from "../../../contracts/Event.sol/EventStorageV2";

const _abi = [
  {
    inputs: [],
    name: "jobId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50605480601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c2939d9714602d575b600080fd5b603560005481565b60405190815260200160405180910390f3fea164736f6c6343000804000a";

type EventStorageV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EventStorageV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EventStorageV2__factory extends ContractFactory {
  constructor(...args: EventStorageV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EventStorageV2> {
    return super.deploy(overrides || {}) as Promise<EventStorageV2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EventStorageV2 {
    return super.attach(address) as EventStorageV2;
  }
  override connect(signer: Signer): EventStorageV2__factory {
    return super.connect(signer) as EventStorageV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventStorageV2Interface {
    return new utils.Interface(_abi) as EventStorageV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EventStorageV2 {
    return new Contract(address, _abi, signerOrProvider) as EventStorageV2;
  }
}
