/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bab806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634f4d2e1e146100515780636341acbc14610077578063812acab11461008a57806383688316146100ad575b600080fd5b61006461005f3660046106a6565b6100c0565b6040519081526020015b60405180910390f35b61006461008536600461074b565b61022d565b61009d61009836600461087d565b61033e565b604051901515815260200161006e565b6100646100bb3660046107f4565b6103b6565b604051632e34059960e01b815260048101899052600090819073ffffffffffffffffffffffffffffffffffffffff8c1690632e3405999060240160006040518083038186803b15801561011257600080fd5b505afa158015610126573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014e919081019061090f565b905082915060005b8781101561021e5788888281811061017e57634e487b7160e01b600052603260045260246000fd5b90506020020135836101909190610ac4565b9250808260600151141561020e57848787838181106101bf57634e487b7160e01b600052603260045260246000fd5b905060200201358a8a848181106101e657634e487b7160e01b600052603260045260246000fd5b905060200201356101f79190610afc565b6102019190610adc565b61020b9084610b1b565b92505b61021781610b32565b9050610156565b50509998505050505050505050565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b15801561027f57600080fd5b505afa158015610293573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102bb919081019061090f565b905086602001358160600151146103185760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b84610324878935610afc565b61032e9190610adc565b9c9b505050505050505050505050565b600080838561034d898d610ac4565b6103579190610ac4565b6103619190610afc565b9050600086888b8b8781811061038757634e487b7160e01b600052603260045260246000fd5b905060200201356103989190610ac4565b6103a29190610afc565b909110159c9b505050505050505050505050565b6000806103c3858a610ac4565b905060008888858181106103e757634e487b7160e01b600052603260045260246000fd5b905060200201359050600085886103fe9190610b1b565b9050858161040c8486610b1b565b6104169190610adc565b6104209190610afc565b9d9c50505050505050505050505050565b805161043c81610b79565b919050565b600082601f830112610451578081fd5b60405161018080820167ffffffffffffffff838210818311171561047757610477610b63565b816040528391508587848801111561048d578586fd5b8593505b600c8410156104ca578051828111156104a8578687fd5b6104b489828a0161061e565b8452506001939093019260209283019201610491565b50929695505050505050565b600082601f8301126104e6578081fd5b815160206104fb6104f683610aa0565b610a6f565b80838252828201915082860187848660051b890101111561051a578586fd5b855b8581101561055b57815167ffffffffffffffff81111561053a578788fd5b6105488a87838c010161061e565b855250928401929084019060010161051c565b5090979650505050505050565b60008083601f840112610579578182fd5b50813567ffffffffffffffff811115610590578182fd5b6020830191508360208260051b85010111156105ab57600080fd5b9250929050565b600082601f8301126105c2578081fd5b815160206105d26104f683610aa0565b80838252828201915082860187848660051b89010111156105f1578586fd5b855b8581101561055b578151845292840192908401906001016105f3565b80516002811061043c57600080fd5b600082601f83011261062e578081fd5b815167ffffffffffffffff81111561064857610648610b63565b602061065c601f8301601f19168201610a6f565b828152858284870101111561066f578384fd5b835b8381101561068c578581018301518282018401528201610671565b8381111561069c57848385840101525b5095945050505050565b600080600080600080600080600060e08a8c0312156106c3578485fd5b89356106ce81610b79565b985060208a0135975060408a0135965060608a013567ffffffffffffffff808211156106f8578687fd5b6107048d838e01610568565b909850965060808c013591508082111561071c578586fd5b506107298c828d01610568565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000808a8c0361016081121561076b578182fd5b8b3561077681610b79565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff81111561079f578283fd5b6107ab8e828f01610568565b9099509750506060607f19820112156107c2578182fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c031215610812578283fd5b893561081d81610b79565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610846578384fd5b6108528c828d01610568565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d03121561089c578384fd5b8a356108a781610b79565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156108d0578485fd5b6108dc8d828e01610568565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610920578081fd5b815167ffffffffffffffff80821115610937578283fd5b90830190610160828603121561094b578283fd5b610953610a45565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610986578485fd5b6109928782860161061e565b6080830152506109a460a0840161060f565b60a08201526109b560c08401610431565b60c08201526109c660e08401610431565b60e082015261010080840151838111156109de578586fd5b6109ea888287016104d6565b8284015250506101208084015183811115610a03578586fd5b610a0f888287016105b2565b8284015250506101408084015183811115610a28578586fd5b610a3488828701610441565b918301919091525095945050505050565b604051610160810167ffffffffffffffff81118282101715610a6957610a69610b63565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a9857610a98610b63565b604052919050565b600067ffffffffffffffff821115610aba57610aba610b63565b5060051b60200190565b60008219821115610ad757610ad7610b4d565b500190565b600082610af757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610b1657610b16610b4d565b500290565b600082821015610b2d57610b2d610b4d565b500390565b6000600019821415610b4657610b46610b4d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610b9b57600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
