/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806320b522361461003b578063da5a234114610063575b600080fd5b61004e610049366004610476565b61008b565b60405190151581526020015b60405180910390f35b6100766100713660046103fd565b6100ba565b6040805192835260208301919091520161005a565b6000610097838561073b565b826100a2878961075a565b6100ac9190610703565b101598975050505050505050565b60008060008873ffffffffffffffffffffffffffffffffffffffff16632e340599896040518263ffffffff1660e01b81526004016100fa91815260200190565b60006040518083038186803b15801561011257600080fd5b505afa158015610126573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014e91908101906104ca565b60808101519091506101a1816101676040890189610638565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061022c92505050565b6101f15760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b6101fb858961073b565b9350868660000135836101200151610213919061073b565b61021d919061071b565b92505050965096945050505050565b60008160405160200161023f919061061c565b6040516020818303038152906040528051906020012083604051602001610266919061061c565b6040516020818303038152906040528051906020012014905092915050565b8051610290816107cd565b919050565b600082601f8301126102a5578081fd5b815160206102ba6102b5836106df565b6106ae565b80838252828201915082860187848660051b89010111156102d9578586fd5b855b8581101561031a57815167ffffffffffffffff8111156102f9578788fd5b6103078a87838c0101610393565b85525092840192908401906001016102db565b5090979650505050505050565b600082601f830112610337578081fd5b815160206103476102b5836106df565b80838252828201915082860187848660051b8901011115610366578586fd5b855b8581101561031a57815184529284019290840190600101610368565b80516002811061029057600080fd5b600082601f8301126103a3578081fd5b815167ffffffffffffffff8111156103bd576103bd6107b7565b6103d0601f8201601f19166020016106ae565b8181528460208386010111156103e4578283fd5b6103f5826020830160208701610771565b949350505050565b60008060008060008060c08789031215610415578182fd5b8635610420816107cd565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115610450578283fd5b87016080818a031215610461578283fd5b8092505060a087013590509295509295509295565b600080600080600080600060e0888a031215610490578081fd5b873561049b816107cd565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b6000602082840312156104db578081fd5b815167ffffffffffffffff808211156104f2578283fd5b908301906101a08286031215610506578283fd5b61050e610684565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610541578485fd5b61054d87828601610393565b60808301525061055f60a08401610384565b60a082015261057060c08401610285565b60c082015260e083015182811115610586578485fd5b61059287828601610393565b60e0830152506101006105a6818501610285565b9082015261012083810151908201526101406105c3818501610285565b9082015261016083810151838111156105da578586fd5b6105e688828701610295565b82840152505061018080840151838111156105ff578586fd5b61060b88828701610327565b918301919091525095945050505050565b6000825161062e818460208701610771565b9190910192915050565b6000808335601e1984360301811261064e578283fd5b83018035915067ffffffffffffffff821115610668578283fd5b60200191503681900382131561067d57600080fd5b9250929050565b6040516101a0810167ffffffffffffffff811182821017156106a8576106a86107b7565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106d7576106d76107b7565b604052919050565b600067ffffffffffffffff8211156106f9576106f96107b7565b5060051b60200190565b60008219821115610716576107166107a1565b500190565b60008261073657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610755576107556107a1565b500290565b60008282101561076c5761076c6107a1565b500390565b60005b8381101561078c578181015183820152602001610774565b8381111561079b576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107ef57600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
