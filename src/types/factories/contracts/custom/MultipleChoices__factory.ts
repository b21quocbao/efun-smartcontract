/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b11806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100c857806394558f0a146100db57600080fd5b8063061bf2dc1461006c5780634f4d2e1e14610092575b600080fd5b61007f61007a366004610716565b6100ee565b6040519081526020015b60405180910390f35b61007f6100a0366004610671565b6101f9565b6100b86100b336600461085e565b610359565b6040519015158152602001610089565b61007f6100d63660046107d5565b6103d1565b61007f6100e936600461085e565b610445565b604051632e34059960e01b8152600481018b905260009081906001600160a01b038e1690632e3405999060240160006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016f91908101906108f0565b905082156101d25787602001358160600151146101d25760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b856101de888a35610a6f565b6101e89190610a4f565b9d9c50505050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561023e57600080fd5b505afa158015610252573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027a91908101906108f0565b905082915060005b8781101561034a578888828181106102aa57634e487b7160e01b600052603260045260246000fd5b90506020020135836102bc9190610a37565b9250808260600151141561033a57848787838181106102eb57634e487b7160e01b600052603260045260246000fd5b905060200201358a8a8481811061031257634e487b7160e01b600052603260045260246000fd5b905060200201356103239190610a6f565b61032d9190610a4f565b6103379084610a8e565b92505b61034381610aa5565b9050610282565b50509998505050505050505050565b6000808385610368898d610a37565b6103729190610a37565b61037c9190610a6f565b9050600086888b8b878181106103a257634e487b7160e01b600052603260045260246000fd5b905060200201356103b39190610a37565b6103bd9190610a6f565b909110159c9b505050505050505050505050565b6000806103de858a610a37565b9050600084878a8a8781811061040457634e487b7160e01b600052603260045260246000fd5b905060200201356104159190610a6f565b61041f9190610a4f565b9050600061042d8689610a8e565b9050808661043b8486610a8e565b6101de9190610a6f565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561048a57600080fd5b505afa15801561049e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c691908101906108f0565b9050846104d38789610a6f565b6104dd9190610a4f565b9c9b505050505050505050505050565b80516104f881610aec565b919050565b60008083601f84011261050e578182fd5b50813567ffffffffffffffff811115610525578182fd5b6020830191508360208260051b850101111561054057600080fd5b9250929050565b600082601f830112610557578081fd5b8151602067ffffffffffffffff82111561057357610573610ad6565b8160051b610582828201610a06565b83815282810190868401838801850189101561059c578687fd5b8693505b858410156105be5780518352600193909301929184019184016105a0565b50979650505050505050565b803580151581146104f857600080fd5b8051600281106104f857600080fd5b600082601f8301126105f9578081fd5b815167ffffffffffffffff81111561061357610613610ad6565b6020610627601f8301601f19168201610a06565b828152858284870101111561063a578384fd5b835b8381101561065757858101830151828201840152820161063c565b8381111561066757848385840101525b5095945050505050565b600080600080600080600080600060e08a8c03121561068e578485fd5b893561069981610aec565b985060208a0135975060408a0135965060608a013567ffffffffffffffff808211156106c3578687fd5b6106cf8d838e016104fd565b909850965060808c01359150808211156106e7578586fd5b506106f48c828d016104fd565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b60008060008060008060008060008060006101808c8e031215610737578182fd5b6107418c35610aec565b8b359a5060208c0135995060408c0135985060608c013567ffffffffffffffff81111561076c578283fd5b6107788e828f016104fd565b90995097505060608c8e03607f19011215610791578182fd5b60808c01955060e08c013594506101008c013593506101208c013592506101408c013591506107c36101608d016105ca565b90509295989b509295989b9093969950565b60008060008060008060008060006101008a8c0312156107f3578485fd5b89356107fe81610aec565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610827578586fd5b6108338c828d016104fd565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d03121561087d578384fd5b8a3561088881610aec565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156108b1578485fd5b6108bd8d828e016104fd565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610901578081fd5b815167ffffffffffffffff80821115610918578283fd5b90830190610120828603121561092c578283fd5b6109346109dc565b82518152602083015160208201526040830151604082015260608301516060820152610962608084016105da565b608082015261097360a084016104ed565b60a082015261098460c084016104ed565b60c082015260e08301518281111561099a578485fd5b6109a687828601610547565b60e08301525061010080840151838111156109bf578586fd5b6109cb888287016105e9565b918301919091525095945050505050565b604051610120810167ffffffffffffffff81118282101715610a0057610a00610ad6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a2f57610a2f610ad6565b604052919050565b60008219821115610a4a57610a4a610ac0565b500190565b600082610a6a57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610a8957610a89610ac0565b500290565b600082821015610aa057610aa0610ac0565b500390565b6000600019821415610ab957610ab9610ac0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b0157600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
