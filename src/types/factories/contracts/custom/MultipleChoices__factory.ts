/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061076d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636341acbc1461003b578063812acab114610061575b600080fd5b61004e6100493660046103ed565b610084565b6040519081526020015b60405180910390f35b61007461006f366004610496565b610195565b6040519015158152602001610058565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101129190810190610528565b9050866020013581606001511461016f5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8461017b8789356106f0565b61018591906106d0565b9c9b505050505050505050505050565b60008083856101a4898d6106b8565b6101ae91906106b8565b6101b891906106f0565b9050600086888b8b878181106101de57634e487b7160e01b600052603260045260246000fd5b905060200201356101ef91906106b8565b6101f991906106f0565b909110159c9b505050505050505050505050565b80516102188161073b565b919050565b600082601f83011261022d578081fd5b8151602061024261023d83610694565b610663565b80838252828201915082860187848660051b8901011115610261578586fd5b855b858110156102a257815167ffffffffffffffff811115610281578788fd5b61028f8a87838c0101610365565b8552509284019290840190600101610263565b5090979650505050505050565b60008083601f8401126102c0578182fd5b50813567ffffffffffffffff8111156102d7578182fd5b6020830191508360208260051b85010111156102f257600080fd5b9250929050565b600082601f830112610309578081fd5b8151602061031961023d83610694565b80838252828201915082860187848660051b8901011115610338578586fd5b855b858110156102a25781518452928401929084019060010161033a565b80516002811061021857600080fd5b600082601f830112610375578081fd5b815167ffffffffffffffff81111561038f5761038f610725565b60206103a3601f8301601f19168201610663565b82815285828487010111156103b6578384fd5b835b838110156103d35785810183015182820184015282016103b8565b838111156103e357848385840101525b5095945050505050565b6000806000806000806000806000808a8c0361016081121561040d578687fd5b8b356104188161073b565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610441578788fd5b61044d8e828f016102af565b9099509750506060607f1982011215610464578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b6000806000806000806000806000806101208b8d0312156104b5578586fd5b8a356104c08161073b565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156104e9578687fd5b6104f58d828e016102af565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610539578081fd5b815167ffffffffffffffff80821115610550578283fd5b908301906101408286031215610564578283fd5b61056c610639565b8251815260208301516020820152604083015160408201526060830151606082015260808301518281111561059f578485fd5b6105ab87828601610365565b6080830152506105bd60a08401610356565b60a08201526105ce60c0840161020d565b60c08201526105df60e0840161020d565b60e082015261010080840151838111156105f7578586fd5b6106038882870161021d565b828401525050610120808401518381111561061c578586fd5b610628888287016102f9565b918301919091525095945050505050565b604051610140810167ffffffffffffffff8111828210171561065d5761065d610725565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561068c5761068c610725565b604052919050565b600067ffffffffffffffff8211156106ae576106ae610725565b5060051b60200190565b600082198211156106cb576106cb61070f565b500190565b6000826106eb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561070a5761070a61070f565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461075d57600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
