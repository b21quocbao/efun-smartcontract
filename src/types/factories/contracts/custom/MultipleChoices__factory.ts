/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b6a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100c857806394558f0a146100db57600080fd5b8063061bf2dc1461006c5780634f4d2e1e14610092575b600080fd5b61007f61007a36600461076f565b6100ee565b6040519081526020015b60405180910390f35b61007f6100a03660046106ca565b6101f9565b6100b86100b33660046108b7565b6103b2565b6040519015158152602001610089565b61007f6100d636600461082e565b61042a565b61007f6100e93660046108b7565b61049e565b604051632e34059960e01b8152600481018b905260009081906001600160a01b038e1690632e3405999060240160006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016f9190810190610949565b905082156101d25787602001358160600151146101d25760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b856101de888a35610ac8565b6101e89190610aa8565b9d9c50505050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561023e57600080fd5b505afa158015610252573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027a9190810190610949565b90506000428260400151620151806102929190610a90565b111580156102c457506001826080015160018111156102c157634e487b7160e01b600052602160045260246000fd5b14155b905083925080156102d65750506103a5565b60005b888110156103a15789898281811061030157634e487b7160e01b600052603260045260246000fd5b90506020020135846103139190610a90565b93508083606001511415610391578588888381811061034257634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8481811061036957634e487b7160e01b600052603260045260246000fd5b9050602002013561037a9190610ac8565b6103849190610aa8565b61038e9085610ae7565b93505b61039a81610afe565b90506102d9565b5050505b9998505050505050505050565b60008083856103c1898d610a90565b6103cb9190610a90565b6103d59190610ac8565b9050600086888b8b878181106103fb57634e487b7160e01b600052603260045260246000fd5b9050602002013561040c9190610a90565b6104169190610ac8565b909110159c9b505050505050505050505050565b600080610437858a610a90565b9050600084878a8a8781811061045d57634e487b7160e01b600052603260045260246000fd5b9050602002013561046e9190610ac8565b6104789190610aa8565b905060006104868689610ae7565b905080866104948486610ae7565b6101de9190610ac8565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b1580156104e357600080fd5b505afa1580156104f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051f9190810190610949565b90508461052c8789610ac8565b6105369190610aa8565b9c9b505050505050505050505050565b805161055181610b45565b919050565b60008083601f840112610567578182fd5b50813567ffffffffffffffff81111561057e578182fd5b6020830191508360208260051b850101111561059957600080fd5b9250929050565b600082601f8301126105b0578081fd5b8151602067ffffffffffffffff8211156105cc576105cc610b2f565b8160051b6105db828201610a5f565b8381528281019086840183880185018910156105f5578687fd5b8693505b858410156106175780518352600193909301929184019184016105f9565b50979650505050505050565b8035801515811461055157600080fd5b80516002811061055157600080fd5b600082601f830112610652578081fd5b815167ffffffffffffffff81111561066c5761066c610b2f565b6020610680601f8301601f19168201610a5f565b8281528582848701011115610693578384fd5b835b838110156106b0578581018301518282018401528201610695565b838111156106c057848385840101525b5095945050505050565b600080600080600080600080600060e08a8c0312156106e7578485fd5b89356106f281610b45565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8082111561071c578687fd5b6107288d838e01610556565b909850965060808c0135915080821115610740578586fd5b5061074d8c828d01610556565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b60008060008060008060008060008060006101808c8e031215610790578182fd5b61079a8c35610b45565b8b359a5060208c0135995060408c0135985060608c013567ffffffffffffffff8111156107c5578283fd5b6107d18e828f01610556565b90995097505060608c8e03607f190112156107ea578182fd5b60808c01955060e08c013594506101008c013593506101208c013592506101408c0135915061081c6101608d01610623565b90509295989b509295989b9093969950565b60008060008060008060008060006101008a8c03121561084c578485fd5b893561085781610b45565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610880578586fd5b61088c8c828d01610556565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d0312156108d6578384fd5b8a356108e181610b45565b995060208b0135985060408b0135975060608b013567ffffffffffffffff81111561090a578485fd5b6109168d828e01610556565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b60006020828403121561095a578081fd5b815167ffffffffffffffff80821115610971578283fd5b908301906101208286031215610985578283fd5b61098d610a35565b825181526020830151602082015260408301516040820152606083015160608201526109bb60808401610633565b60808201526109cc60a08401610546565b60a08201526109dd60c08401610546565b60c082015260e0830151828111156109f3578485fd5b6109ff878286016105a0565b60e0830152506101008084015183811115610a18578586fd5b610a2488828701610642565b918301919091525095945050505050565b604051610120810167ffffffffffffffff81118282101715610a5957610a59610b2f565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a8857610a88610b2f565b604052919050565b60008219821115610aa357610aa3610b19565b500190565b600082610ac357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610ae257610ae2610b19565b500290565b600082821015610af957610af9610b19565b500390565b6000600019821415610b1257610b12610b19565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b5a57600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
