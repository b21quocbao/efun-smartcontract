/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610841806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806357133daf1461003b578063a18e7b9314610063575b600080fd5b61004e6100493660046104af565b61008b565b60405190151581526020015b60405180910390f35b61007661007136600461042c565b6100dc565b6040805192835260208301919091520161005a565b600080846100998789610745565b6100a3919061077d565b83856100af898c610745565b6100b99190610745565b6100c3919061077d565b6100cd919061079c565b10159998505050505050505050565b60008060008973ffffffffffffffffffffffffffffffffffffffff16632e3405998a6040518263ffffffff1660e01b815260040161011c91815260200190565b60006040518083038186803b15801561013457600080fd5b505afa158015610148573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610170919081019061050c565b60808101519091506101c38161018960408a018a61067a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061025b92505050565b6102135760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8461021f87893561077d565b610229919061075d565b9350878760000135836101200151610241919061077d565b61024b919061075d565b9250505097509795505050505050565b60008160405160200161026e919061065e565b6040516020818303038152906040528051906020012083604051602001610295919061065e565b6040516020818303038152906040528051906020012014905092915050565b80516102bf8161080f565b919050565b600082601f8301126102d4578081fd5b815160206102e96102e483610721565b6106f0565b80838252828201915082860187848660051b8901011115610308578586fd5b855b8581101561034957815167ffffffffffffffff811115610328578788fd5b6103368a87838c01016103c2565b855250928401929084019060010161030a565b5090979650505050505050565b600082601f830112610366578081fd5b815160206103766102e483610721565b80838252828201915082860187848660051b8901011115610395578586fd5b855b8581101561034957815184529284019290840190600101610397565b8051600281106102bf57600080fd5b600082601f8301126103d2578081fd5b815167ffffffffffffffff8111156103ec576103ec6107f9565b6103ff601f8201601f19166020016106f0565b818152846020838601011115610413578283fd5b6104248260208301602087016107b3565b949350505050565b600080600080600080600060e0888a031215610446578283fd5b87356104518161080f565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff811115610481578384fd5b88016080818b031215610492578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600080610100898b0312156104cb578081fd5b88356104d68161080f565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b60006020828403121561051d578081fd5b815167ffffffffffffffff80821115610534578283fd5b908301906101a08286031215610548578283fd5b6105506106c6565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610583578485fd5b61058f878286016103c2565b6080830152506105a160a084016103b3565b60a08201526105b260c084016102b4565b60c082015260e0830151828111156105c8578485fd5b6105d4878286016103c2565b60e0830152506101006105e88185016102b4565b9082015261012083810151908201526101406106058185016102b4565b90820152610160838101518381111561061c578586fd5b610628888287016102c4565b8284015250506101808084015183811115610641578586fd5b61064d88828701610356565b918301919091525095945050505050565b600082516106708184602087016107b3565b9190910192915050565b6000808335601e19843603018112610690578283fd5b83018035915067ffffffffffffffff8211156106aa578283fd5b6020019150368190038213156106bf57600080fd5b9250929050565b6040516101a0810167ffffffffffffffff811182821017156106ea576106ea6107f9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610719576107196107f9565b604052919050565b600067ffffffffffffffff82111561073b5761073b6107f9565b5060051b60200190565b60008219821115610758576107586107e3565b500190565b60008261077857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610797576107976107e3565b500290565b6000828210156107ae576107ae6107e3565b500390565b60005b838110156107ce5781810151838201526020016107b6565b838111156107dd576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461083157600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
