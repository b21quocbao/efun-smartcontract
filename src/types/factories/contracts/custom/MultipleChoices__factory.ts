/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610960806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636341acbc14610046578063812acab11461006c578063836883161461008f575b600080fd5b61005961005436600461051b565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a36600461064d565b6101b3565b6040519015158152602001610063565b61005961009d3660046105c4565b61022b565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261013091908101906106df565b9050866020013581606001511461018d5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b846101998789356108cc565b6101a391906108ac565b9c9b505050505050505050505050565b60008083856101c2898d610894565b6101cc9190610894565b6101d691906108cc565b9050600086888b8b878181106101fc57634e487b7160e01b600052603260045260246000fd5b9050602002013561020d9190610894565b61021791906108cc565b909110159c9b505050505050505050505050565b600080610238858a610894565b9050600088888581811061025c57634e487b7160e01b600052603260045260246000fd5b9050602002013590506000858861027391906108eb565b9050858161028184866108eb565b61028b91906108ac565b61029591906108cc565b9d9c50505050505050505050505050565b80516102b18161092e565b919050565b600082601f8301126102c6578081fd5b60405161018080820167ffffffffffffffff83821081831117156102ec576102ec610918565b8160405283915085878488011115610302578586fd5b8593505b600c84101561033f5780518281111561031d578687fd5b61032989828a01610493565b8452506001939093019260209283019201610306565b50929695505050505050565b600082601f83011261035b578081fd5b8151602061037061036b83610870565b61083f565b80838252828201915082860187848660051b890101111561038f578586fd5b855b858110156103d057815167ffffffffffffffff8111156103af578788fd5b6103bd8a87838c0101610493565b8552509284019290840190600101610391565b5090979650505050505050565b60008083601f8401126103ee578182fd5b50813567ffffffffffffffff811115610405578182fd5b6020830191508360208260051b850101111561042057600080fd5b9250929050565b600082601f830112610437578081fd5b8151602061044761036b83610870565b80838252828201915082860187848660051b8901011115610466578586fd5b855b858110156103d057815184529284019290840190600101610468565b8051600281106102b157600080fd5b600082601f8301126104a3578081fd5b815167ffffffffffffffff8111156104bd576104bd610918565b60206104d1601f8301601f1916820161083f565b82815285828487010111156104e4578384fd5b835b838110156105015785810183015182820184015282016104e6565b8381111561051157848385840101525b5095945050505050565b6000806000806000806000806000808a8c0361016081121561053b578687fd5b8b356105468161092e565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff81111561056f578788fd5b61057b8e828f016103dd565b9099509750506060607f1982011215610592578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c0312156105e2578485fd5b89356105ed8161092e565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610616578586fd5b6106228c828d016103dd565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d03121561066c578384fd5b8a356106778161092e565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156106a0578485fd5b6106ac8d828e016103dd565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b6000602082840312156106f0578081fd5b815167ffffffffffffffff80821115610707578283fd5b90830190610160828603121561071b578283fd5b610723610815565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610756578485fd5b61076287828601610493565b60808301525061077460a08401610484565b60a082015261078560c084016102a6565b60c082015261079660e084016102a6565b60e082015261010080840151838111156107ae578586fd5b6107ba8882870161034b565b82840152505061012080840151838111156107d3578586fd5b6107df88828701610427565b82840152505061014080840151838111156107f8578586fd5b610804888287016102b6565b918301919091525095945050505050565b604051610160810167ffffffffffffffff8111828210171561083957610839610918565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561086857610868610918565b604052919050565b600067ffffffffffffffff82111561088a5761088a610918565b5060051b60200190565b600082198211156108a7576108a7610902565b500190565b6000826108c757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156108e6576108e6610902565b500290565b6000828210156108fd576108fd610902565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461095057600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
