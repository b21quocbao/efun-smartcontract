/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610824806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dc5e10981461003b578063fa29edd914610068575b600080fd5b61004e61004936600461042d565b61008b565b604080519283526020830191909152015b60405180910390f35b61007b6100763660046104b7565b61020a565b604051901515815260200161005f565b60008060008a73ffffffffffffffffffffffffffffffffffffffff16632e3405998b6040518263ffffffff1660e01b81526004016100cb91815260200190565b60006040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011f919081019061051e565b60608101519091506101728161013860408b018b61065d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061025c92505050565b6101c25760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b856101ce888a35610760565b6101d89190610740565b93508888600001358360e001516101ef9190610760565b6101f99190610740565b925050509850989650505050505050565b60008085610218888a610728565b6102229190610760565b848661022e8a8d610728565b6102389190610728565b6102429190610760565b61024c919061077f565b10159a9950505050505050505050565b60008160405160200161026f9190610641565b60405160208183030381529060405280519060200120836040516020016102969190610641565b6040516020818303038152906040528051906020012014905092915050565b80516102c0816107f2565b919050565b600082601f8301126102d5578081fd5b815160206102ea6102e583610704565b6106d3565b80838252828201915082860187848660051b8901011115610309578586fd5b855b8581101561034a57815167ffffffffffffffff811115610329578788fd5b6103378a87838c01016103c3565b855250928401929084019060010161030b565b5090979650505050505050565b600082601f830112610367578081fd5b815160206103776102e583610704565b80838252828201915082860187848660051b8901011115610396578586fd5b855b8581101561034a57815184529284019290840190600101610398565b8051600281106102c057600080fd5b600082601f8301126103d3578081fd5b815167ffffffffffffffff8111156103ed576103ed6107dc565b610400601f8201601f19166020016106d3565b818152846020838601011115610414578283fd5b610425826020830160208701610796565b949350505050565b600080600080600080600080610100898b031215610449578384fd5b8835610454816107f2565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff811115610484578485fd5b89016080818c031215610495578485fd5b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060008060006101208a8c0312156104d5578081fd5b89356104e0816107f2565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b60006020828403121561052f578081fd5b815167ffffffffffffffff80821115610546578283fd5b90830190610160828603121561055a578283fd5b6105626106a9565b82518152602083015160208201526040830151604082015260608301518281111561058b578485fd5b610597878286016103c3565b6060830152506105a9608084016103b4565b60808201526105ba60a084016102b5565b60a08201526105cb60c084016102b5565b60c082015260e083015160e08201526101006105e88185016102b5565b9082015261012083810151838111156105ff578586fd5b61060b888287016102c5565b8284015250506101408084015183811115610624578586fd5b61063088828701610357565b918301919091525095945050505050565b60008251610653818460208701610796565b9190910192915050565b6000808335601e19843603018112610673578283fd5b83018035915067ffffffffffffffff82111561068d578283fd5b6020019150368190038213156106a257600080fd5b9250929050565b604051610160810167ffffffffffffffff811182821017156106cd576106cd6107dc565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106fc576106fc6107dc565b604052919050565b600067ffffffffffffffff82111561071e5761071e6107dc565b5060051b60200190565b6000821982111561073b5761073b6107c6565b500190565b60008261075b57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561077a5761077a6107c6565b500290565b600082821015610791576107916107c6565b500390565b60005b838110156107b1578181015183820152602001610799565b838111156107c0576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461081457600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
