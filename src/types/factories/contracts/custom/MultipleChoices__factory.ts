/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
    ],
    name: "hostFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bf4806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063836883161161005b57806383688316146100ce57806394558f0a146100e1578063ccb32ac5146100f4578063dcbfcc971461010a57600080fd5b806326232a2e146100825780634f4d2e1e14610098578063812acab1146100ab575b600080fd5b60325b6040519081526020015b60405180910390f35b6100856100a63660046106ff565b61011d565b6100be6100b93660046108d9565b61027d565b604051901515815260200161008f565b6100856100dc366004610850565b6102f5565b6100856100ef3660046108d9565b610384565b6100856101023660046106d4565b600092915050565b6100856101183660046107a4565b61042c565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561016257600080fd5b505afa158015610176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261019e919081019061096b565b905082915060005b8781101561026e578888828181106101ce57634e487b7160e01b600052603260045260246000fd5b90506020020135836101e09190610b0c565b9250808260600151141561025e578487878381811061020f57634e487b7160e01b600052603260045260246000fd5b905060200201358a8a8481811061023657634e487b7160e01b600052603260045260246000fd5b905060200201356102479190610b44565b6102519190610b24565b61025b9084610b63565b92505b61026781610b7a565b90506101a6565b50509998505050505050505050565b600080838561028c898d610b0c565b6102969190610b0c565b6102a09190610b44565b9050600086888b8b878181106102c657634e487b7160e01b600052603260045260246000fd5b905060200201356102d79190610b0c565b6102e19190610b44565b909110159c9b505050505050505050505050565b600080610302858a610b0c565b9050600084878a8a8781811061032857634e487b7160e01b600052603260045260246000fd5b905060200201356103399190610b44565b6103439190610b24565b905060006103518689610b63565b9050808661035f8486610b63565b6103699190610b44565b6103739190610b24565b9d9c50505050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b1580156103c957600080fd5b505afa1580156103dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610405919081019061096b565b9050846104128789610b44565b61041c9190610b24565b9c9b505050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ad919081019061096b565b905060008660200135905060008260e0015182815181106104de57634e487b7160e01b600052603260045260246000fd5b6020026020010151905084156105495787602001358360600151146105495760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b86610369828a35610b44565b805161056081610bc1565b919050565b60008083601f840112610576578182fd5b50813567ffffffffffffffff81111561058d578182fd5b6020830191508360208260051b85010111156105a857600080fd5b9250929050565b600082601f8301126105bf578081fd5b8151602067ffffffffffffffff8211156105db576105db610bab565b8160051b6105ea828201610adb565b838152828101908684018388018501891015610604578687fd5b8693505b85841015610626578051835260019390930192918401918401610608565b50979650505050505050565b805161056081610bd9565b80516003811061056057600080fd5b600082601f83011261065c578081fd5b815167ffffffffffffffff81111561067657610676610bab565b602061068a601f8301601f19168201610adb565b828152858284870101111561069d578384fd5b835b838110156106ba57858101830151828201840152820161069f565b838111156106ca57848385840101525b5095945050505050565b600080604083850312156106e6578182fd5b82356106f181610bc1565b946020939093013593505050565b600080600080600080600080600060e08a8c03121561071c578485fd5b893561072781610bc1565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610751578687fd5b61075d8d838e01610565565b909850965060808c0135915080821115610775578586fd5b506107828c828d01610565565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000898b036101408112156107c3578586fd5b8a356107ce81610bc1565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156107f7578687fd5b6108038d828e01610565565b9098509650506060607f198201121561081a578485fd5b5060808a01935060e08a013592506101008a013591506101208a013561083f81610bd9565b809150509295985092959850929598565b60008060008060008060008060006101008a8c03121561086e578485fd5b893561087981610bc1565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8111156108a2578586fd5b6108ae8c828d01610565565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d0312156108f8578384fd5b8a3561090381610bc1565b995060208b0135985060408b0135975060608b013567ffffffffffffffff81111561092c578485fd5b6109388d828e01610565565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b60006020828403121561097c578081fd5b815167ffffffffffffffff80821115610993578283fd5b908301906101e082860312156109a7578283fd5b6109af610ab1565b825181526020830151602082015260408301516040820152606083015160608201526109dd6080840161063d565b60808201526109ee60a08401610555565b60a08201526109ff60c08401610555565b60c082015260e083015182811115610a15578485fd5b610a21878286016105af565b60e0830152506101008084015183811115610a3a578586fd5b610a468882870161064c565b828401525050610120915081830151828201526101409150610a69828401610632565b91810191909152610160828101519082015261018080830151908201526101a090610a95828401610632565b918101919091526101c091820151918101919091529392505050565b6040516101e0810167ffffffffffffffff81118282101715610ad557610ad5610bab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b0457610b04610bab565b604052919050565b60008219821115610b1f57610b1f610b95565b500190565b600082610b3f57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610b5e57610b5e610b95565b500290565b600082821015610b7557610b75610b95565b500390565b6000600019821415610b8e57610b8e610b95565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bd657600080fd5b50565b8015158114610bd657600080fdfea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
