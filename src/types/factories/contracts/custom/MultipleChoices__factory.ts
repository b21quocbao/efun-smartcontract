/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108a6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636341acbc14610046578063812acab11461006c578063836883161461008f575b600080fd5b610059610054366004610486565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a3660046105b8565b6101b3565b6040519015158152602001610063565b61005961009d36600461052f565b61022b565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610130919081019061064a565b9050866020013581606001511461018d5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b84610199878935610812565b6101a391906107f2565b9c9b505050505050505050505050565b60008083856101c2898d6107da565b6101cc91906107da565b6101d69190610812565b9050600086888b8b878181106101fc57634e487b7160e01b600052603260045260246000fd5b9050602002013561020d91906107da565b6102179190610812565b909110159c9b505050505050505050505050565b600080610238858a6107da565b9050600088888581811061025c57634e487b7160e01b600052603260045260246000fd5b905060200201359050600085886102739190610831565b905085816102818486610831565b61028b91906107f2565b6102959190610812565b9d9c50505050505050505050505050565b80516102b181610874565b919050565b600082601f8301126102c6578081fd5b815160206102db6102d6836107b6565b610785565b80838252828201915082860187848660051b89010111156102fa578586fd5b855b8581101561033b57815167ffffffffffffffff81111561031a578788fd5b6103288a87838c01016103fe565b85525092840192908401906001016102fc565b5090979650505050505050565b60008083601f840112610359578182fd5b50813567ffffffffffffffff811115610370578182fd5b6020830191508360208260051b850101111561038b57600080fd5b9250929050565b600082601f8301126103a2578081fd5b815160206103b26102d6836107b6565b80838252828201915082860187848660051b89010111156103d1578586fd5b855b8581101561033b578151845292840192908401906001016103d3565b8051600281106102b157600080fd5b600082601f83011261040e578081fd5b815167ffffffffffffffff8111156104285761042861085e565b602061043c601f8301601f19168201610785565b828152858284870101111561044f578384fd5b835b8381101561046c578581018301518282018401528201610451565b8381111561047c57848385840101525b5095945050505050565b6000806000806000806000806000808a8c036101608112156104a6578687fd5b8b356104b181610874565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff8111156104da578788fd5b6104e68e828f01610348565b9099509750506060607f19820112156104fd578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c03121561054d578485fd5b893561055881610874565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610581578586fd5b61058d8c828d01610348565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d0312156105d7578586fd5b8a356105e281610874565b995060208b0135985060408b0135975060608b013567ffffffffffffffff81111561060b578687fd5b6106178d828e01610348565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b60006020828403121561065b578081fd5b815167ffffffffffffffff80821115610672578283fd5b908301906101408286031215610686578283fd5b61068e61075b565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156106c1578485fd5b6106cd878286016103fe565b6080830152506106df60a084016103ef565b60a08201526106f060c084016102a6565b60c082015261070160e084016102a6565b60e08201526101008084015183811115610719578586fd5b610725888287016102b6565b828401525050610120808401518381111561073e578586fd5b61074a88828701610392565b918301919091525095945050505050565b604051610140810167ffffffffffffffff8111828210171561077f5761077f61085e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107ae576107ae61085e565b604052919050565b600067ffffffffffffffff8211156107d0576107d061085e565b5060051b60200190565b600082198211156107ed576107ed610848565b500190565b60008261080d57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561082c5761082c610848565b500290565b60008282101561084357610843610848565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461089657600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
