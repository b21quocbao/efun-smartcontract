/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dc5e10981461003b578063fa29edd914610061575b600080fd5b61004e6100493660046103fd565b610084565b6040519081526020015b60405180910390f35b61007461006f366004610487565b6101da565b6040519015158152602001610058565b604051632e34059960e01b815260048101889052600090819073ffffffffffffffffffffffffffffffffffffffff8b1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011291908101906104ee565b60608101519091506101658161012b60408a018a61062d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061022c92505050565b6101b55760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b846101c1878935610730565b6101cb9190610710565b9b9a5050505050505050505050565b600080856101e8888a6106f8565b6101f29190610730565b84866101fe8a8d6106f8565b61020891906106f8565b6102129190610730565b61021c919061074f565b10159a9950505050505050505050565b60008160405160200161023f9190610611565b60405160208183030381529060405280519060200120836040516020016102669190610611565b6040516020818303038152906040528051906020012014905092915050565b8051610290816107c2565b919050565b600082601f8301126102a5578081fd5b815160206102ba6102b5836106d4565b6106a3565b80838252828201915082860187848660051b89010111156102d9578586fd5b855b8581101561031a57815167ffffffffffffffff8111156102f9578788fd5b6103078a87838c0101610393565b85525092840192908401906001016102db565b5090979650505050505050565b600082601f830112610337578081fd5b815160206103476102b5836106d4565b80838252828201915082860187848660051b8901011115610366578586fd5b855b8581101561031a57815184529284019290840190600101610368565b80516002811061029057600080fd5b600082601f8301126103a3578081fd5b815167ffffffffffffffff8111156103bd576103bd6107ac565b6103d0601f8201601f19166020016106a3565b8181528460208386010111156103e4578283fd5b6103f5826020830160208701610766565b949350505050565b600080600080600080600080610100898b031215610419578384fd5b8835610424816107c2565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff811115610454578485fd5b89016080818c031215610465578485fd5b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060008060006101208a8c0312156104a5578081fd5b89356104b0816107c2565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b6000602082840312156104ff578081fd5b815167ffffffffffffffff80821115610516578283fd5b90830190610160828603121561052a578283fd5b610532610679565b82518152602083015160208201526040830151604082015260608301518281111561055b578485fd5b61056787828601610393565b60608301525061057960808401610384565b608082015261058a60a08401610285565b60a082015261059b60c08401610285565b60c082015260e083015160e08201526101006105b8818501610285565b9082015261012083810151838111156105cf578586fd5b6105db88828701610295565b82840152505061014080840151838111156105f4578586fd5b61060088828701610327565b918301919091525095945050505050565b60008251610623818460208701610766565b9190910192915050565b6000808335601e19843603018112610643578283fd5b83018035915067ffffffffffffffff82111561065d578283fd5b60200191503681900382131561067257600080fd5b9250929050565b604051610160810167ffffffffffffffff8111828210171561069d5761069d6107ac565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106cc576106cc6107ac565b604052919050565b600067ffffffffffffffff8211156106ee576106ee6107ac565b5060051b60200190565b6000821982111561070b5761070b610796565b500190565b60008261072b57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561074a5761074a610796565b500290565b60008282101561076157610761610796565b500390565b60005b83811015610781578181015183820152602001610769565b83811115610790576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107e457600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
