/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../contracts/custom/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c40806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100c857806394558f0a146100db57600080fd5b80634f4d2e1e1461006c5780636341acbc14610092575b600080fd5b61007f61007a366004610748565b6100ee565b6040519081526020015b60405180910390f35b61007f6100a03660046107ed565b61024e565b6100b86100b336600461091f565b610352565b6040519015158152602001610089565b61007f6100d6366004610896565b6103ca565b61007f6100e936600461091f565b610445565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016f91908101906109b1565b905082915060005b8781101561023f5788888281811061019f57634e487b7160e01b600052603260045260246000fd5b90506020020135836101b19190610b66565b9250808260600151141561022f57848787838181106101e057634e487b7160e01b600052603260045260246000fd5b905060200201358a8a8481811061020757634e487b7160e01b600052603260045260246000fd5b905060200201356102189190610b9e565b6102229190610b7e565b61022c9084610bbd565b92505b61023881610bd4565b9050610177565b50509998505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561029357600080fd5b505afa1580156102a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cf91908101906109b1565b9050866020013581606001511461032c5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b84610338878935610b9e565b6103429190610b7e565b9c9b505050505050505050505050565b6000808385610361898d610b66565b61036b9190610b66565b6103759190610b9e565b9050600086888b8b8781811061039b57634e487b7160e01b600052603260045260246000fd5b905060200201356103ac9190610b66565b6103b69190610b9e565b909110159c9b505050505050505050505050565b6000806103d7858a610b66565b905060008888858181106103fb57634e487b7160e01b600052603260045260246000fd5b905060200201359050600085886104129190610bbd565b905085816104208486610bbd565b61042a9190610b7e565b6104349190610b9e565b9d9c50505050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561048a57600080fd5b505afa15801561049e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c691908101906109b1565b9050846103388789610b9e565b80516104de81610c1b565b919050565b600082601f8301126104f3578081fd5b60405161018080820167ffffffffffffffff838210818311171561051957610519610c05565b816040528391508587848801111561052f578586fd5b8593505b600c84101561056c5780518281111561054a578687fd5b61055689828a016106c0565b8452506001939093019260209283019201610533565b50929695505050505050565b600082601f830112610588578081fd5b8151602061059d61059883610b42565b610b11565b80838252828201915082860187848660051b89010111156105bc578586fd5b855b858110156105fd57815167ffffffffffffffff8111156105dc578788fd5b6105ea8a87838c01016106c0565b85525092840192908401906001016105be565b5090979650505050505050565b60008083601f84011261061b578182fd5b50813567ffffffffffffffff811115610632578182fd5b6020830191508360208260051b850101111561064d57600080fd5b9250929050565b600082601f830112610664578081fd5b8151602061067461059883610b42565b80838252828201915082860187848660051b8901011115610693578586fd5b855b858110156105fd57815184529284019290840190600101610695565b8051600281106104de57600080fd5b600082601f8301126106d0578081fd5b815167ffffffffffffffff8111156106ea576106ea610c05565b60206106fe601f8301601f19168201610b11565b8281528582848701011115610711578384fd5b835b8381101561072e578581018301518282018401528201610713565b8381111561073e57848385840101525b5095945050505050565b600080600080600080600080600060e08a8c031215610765578485fd5b893561077081610c1b565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8082111561079a578687fd5b6107a68d838e0161060a565b909850965060808c01359150808211156107be578586fd5b506107cb8c828d0161060a565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000808a8c0361016081121561080d578182fd5b8b3561081881610c1b565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610841578283fd5b61084d8e828f0161060a565b9099509750506060607f1982011215610864578182fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c0312156108b4578283fd5b89356108bf81610c1b565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8111156108e8578384fd5b6108f48c828d0161060a565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d03121561093e578384fd5b8a3561094981610c1b565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610972578485fd5b61097e8d828e0161060a565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b6000602082840312156109c2578081fd5b815167ffffffffffffffff808211156109d9578283fd5b9083019061016082860312156109ed578283fd5b6109f5610ae7565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610a28578485fd5b610a34878286016106c0565b608083015250610a4660a084016106b1565b60a0820152610a5760c084016104d3565b60c0820152610a6860e084016104d3565b60e08201526101008084015183811115610a80578586fd5b610a8c88828701610578565b8284015250506101208084015183811115610aa5578586fd5b610ab188828701610654565b8284015250506101408084015183811115610aca578586fd5b610ad6888287016104e3565b918301919091525095945050505050565b604051610160810167ffffffffffffffff81118282101715610b0b57610b0b610c05565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3a57610b3a610c05565b604052919050565b600067ffffffffffffffff821115610b5c57610b5c610c05565b5060051b60200190565b60008219821115610b7957610b79610bef565b500190565b600082610b9957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610bb857610bb8610bef565b500290565b600082821015610bcf57610bcf610bef565b500390565b6000600019821415610be857610be8610bef565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c3057600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
