/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061089f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636341acbc14610046578063812acab11461006c578063836883161461009a575b600080fd5b610059610054366004610471565b6100b7565b6040519081526020015b60405180910390f35b61008a61007a3660046105a3565b60019a9950505050505050505050565b6040519015158152602001610063565b6100596100a836600461051a565b60009998505050505050505050565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b15801561010957600080fd5b505afa15801561011d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101459190810190610635565b905086602001358160600151146101a25760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8888858181106101c257634e487b7160e01b600052603260045260246000fd5b6020029190910135905087356101d8858d6107ea565b6101e29190610822565b6101ec9190610802565b9c9b505050505050505050505050565b80516102078161086d565b919050565b600082601f83011261021c578081fd5b60405161018080820167ffffffffffffffff838210818311171561024257610242610857565b8160405283915085878488011115610258578586fd5b8593505b600c84101561029557805182811115610273578687fd5b61027f89828a016103e9565b845250600193909301926020928301920161025c565b50929695505050505050565b600082601f8301126102b1578081fd5b815160206102c66102c1836107c6565b610795565b80838252828201915082860187848660051b89010111156102e5578586fd5b855b8581101561032657815167ffffffffffffffff811115610305578788fd5b6103138a87838c01016103e9565b85525092840192908401906001016102e7565b5090979650505050505050565b60008083601f840112610344578182fd5b50813567ffffffffffffffff81111561035b578182fd5b6020830191508360208260051b850101111561037657600080fd5b9250929050565b600082601f83011261038d578081fd5b8151602061039d6102c1836107c6565b80838252828201915082860187848660051b89010111156103bc578586fd5b855b85811015610326578151845292840192908401906001016103be565b80516002811061020757600080fd5b600082601f8301126103f9578081fd5b815167ffffffffffffffff81111561041357610413610857565b6020610427601f8301601f19168201610795565b828152858284870101111561043a578384fd5b835b8381101561045757858101830151828201840152820161043c565b8381111561046757848385840101525b5095945050505050565b6000806000806000806000806000808a8c03610160811215610491578687fd5b8b3561049c8161086d565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff8111156104c5578788fd5b6104d18e828f01610333565b9099509750506060607f19820112156104e8578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c031215610538578485fd5b89356105438161086d565b985060208a0135975060408a0135965060608a013567ffffffffffffffff81111561056c578586fd5b6105788c828d01610333565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d0312156105c2578384fd5b8a356105cd8161086d565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156105f6578485fd5b6106028d828e01610333565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610646578081fd5b815167ffffffffffffffff8082111561065d578283fd5b908301906101608286031215610671578283fd5b61067961076b565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156106ac578485fd5b6106b8878286016103e9565b6080830152506106ca60a084016103da565b60a08201526106db60c084016101fc565b60c08201526106ec60e084016101fc565b60e08201526101008084015183811115610704578586fd5b610710888287016102a1565b8284015250506101208084015183811115610729578586fd5b6107358882870161037d565b828401525050610140808401518381111561074e578586fd5b61075a8882870161020c565b918301919091525095945050505050565b604051610160810167ffffffffffffffff8111828210171561078f5761078f610857565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107be576107be610857565b604052919050565b600067ffffffffffffffff8211156107e0576107e0610857565b5060051b60200190565b600082198211156107fd576107fd610841565b500190565b60008261081d57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561083c5761083c610841565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461088f57600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
