/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636341acbc14610046578063812acab11461006c578063836883161461009a575b600080fd5b6100596100543660046103dc565b6100b7565b6040519081526020015b60405180910390f35b61008a61007a36600461050e565b60019a9950505050505050505050565b6040519015158152602001610063565b6100596100a8366004610485565b60009998505050505050505050565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b15801561010957600080fd5b505afa15801561011d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014591908101906105a0565b905086602001358160600151146101a25760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8888858181106101c257634e487b7160e01b600052603260045260246000fd5b6020029190910135905087356101d8858d610730565b6101e29190610768565b6101ec9190610748565b9c9b505050505050505050505050565b8051610207816107b3565b919050565b600082601f83011261021c578081fd5b8151602061023161022c8361070c565b6106db565b80838252828201915082860187848660051b8901011115610250578586fd5b855b8581101561029157815167ffffffffffffffff811115610270578788fd5b61027e8a87838c0101610354565b8552509284019290840190600101610252565b5090979650505050505050565b60008083601f8401126102af578182fd5b50813567ffffffffffffffff8111156102c6578182fd5b6020830191508360208260051b85010111156102e157600080fd5b9250929050565b600082601f8301126102f8578081fd5b8151602061030861022c8361070c565b80838252828201915082860187848660051b8901011115610327578586fd5b855b8581101561029157815184529284019290840190600101610329565b80516002811061020757600080fd5b600082601f830112610364578081fd5b815167ffffffffffffffff81111561037e5761037e61079d565b6020610392601f8301601f191682016106db565b82815285828487010111156103a5578384fd5b835b838110156103c25785810183015182820184015282016103a7565b838111156103d257848385840101525b5095945050505050565b6000806000806000806000806000808a8c036101608112156103fc578687fd5b8b35610407816107b3565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610430578788fd5b61043c8e828f0161029e565b9099509750506060607f1982011215610453578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c0312156104a3578485fd5b89356104ae816107b3565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8111156104d7578586fd5b6104e38c828d0161029e565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d03121561052d578586fd5b8a35610538816107b3565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610561578687fd5b61056d8d828e0161029e565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b6000602082840312156105b1578081fd5b815167ffffffffffffffff808211156105c8578283fd5b9083019061014082860312156105dc578283fd5b6105e46106b1565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610617578485fd5b61062387828601610354565b60808301525061063560a08401610345565b60a082015261064660c084016101fc565b60c082015261065760e084016101fc565b60e0820152610100808401518381111561066f578586fd5b61067b8882870161020c565b8284015250506101208084015183811115610694578586fd5b6106a0888287016102e8565b918301919091525095945050505050565b604051610140810167ffffffffffffffff811182821017156106d5576106d561079d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107045761070461079d565b604052919050565b600067ffffffffffffffff8211156107265761072661079d565b5060051b60200190565b6000821982111561074357610743610787565b500190565b60008261076357634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561078257610782610787565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107d557600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
