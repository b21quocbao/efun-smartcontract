/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610734806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636341acbc1461003b578063812acab114610061575b600080fd5b61004e6100493660046103b4565b61008f565b6040519081526020015b60405180910390f35b61007f61006f36600461045d565b60019a9950505050505050505050565b6040519015158152602001610058565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100e157600080fd5b505afa1580156100f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011d91908101906104ef565b9050866020013581606001511461017a5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b88888581811061019a57634e487b7160e01b600052603260045260246000fd5b6020029190910135905087356101b0858d61067f565b6101ba91906106b7565b6101c49190610697565b9c9b505050505050505050505050565b80516101df81610702565b919050565b600082601f8301126101f4578081fd5b815160206102096102048361065b565b61062a565b80838252828201915082860187848660051b8901011115610228578586fd5b855b8581101561026957815167ffffffffffffffff811115610248578788fd5b6102568a87838c010161032c565b855250928401929084019060010161022a565b5090979650505050505050565b60008083601f840112610287578182fd5b50813567ffffffffffffffff81111561029e578182fd5b6020830191508360208260051b85010111156102b957600080fd5b9250929050565b600082601f8301126102d0578081fd5b815160206102e06102048361065b565b80838252828201915082860187848660051b89010111156102ff578586fd5b855b8581101561026957815184529284019290840190600101610301565b8051600281106101df57600080fd5b600082601f83011261033c578081fd5b815167ffffffffffffffff811115610356576103566106ec565b602061036a601f8301601f1916820161062a565b828152858284870101111561037d578384fd5b835b8381101561039a57858101830151828201840152820161037f565b838111156103aa57848385840101525b5095945050505050565b6000806000806000806000806000808a8c036101608112156103d4578687fd5b8b356103df81610702565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610408578788fd5b6104148e828f01610276565b9099509750506060607f198201121561042b578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b6000806000806000806000806000806101208b8d03121561047c578586fd5b8a3561048781610702565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156104b0578687fd5b6104bc8d828e01610276565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610500578081fd5b815167ffffffffffffffff80821115610517578283fd5b90830190610140828603121561052b578283fd5b610533610600565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610566578485fd5b6105728782860161032c565b60808301525061058460a0840161031d565b60a082015261059560c084016101d4565b60c08201526105a660e084016101d4565b60e082015261010080840151838111156105be578586fd5b6105ca888287016101e4565b82840152505061012080840151838111156105e3578586fd5b6105ef888287016102c0565b918301919091525095945050505050565b604051610140810167ffffffffffffffff81118282101715610624576106246106ec565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610653576106536106ec565b604052919050565b600067ffffffffffffffff821115610675576106756106ec565b5060051b60200190565b60008219821115610692576106926106d6565b500190565b6000826106b257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156106d1576106d16106d6565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461072457600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
