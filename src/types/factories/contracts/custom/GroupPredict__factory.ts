/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107ab806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806320b522361461003b578063da5a23411461006b575b600080fd5b61005661004936600461045b565b6001979650505050505050565b60405190151581526020015b60405180910390f35b61007e6100793660046103e2565b610093565b60408051928352602083019190915201610062565b60008060008873ffffffffffffffffffffffffffffffffffffffff16632e340599896040518263ffffffff1660e01b81526004016100d391815260200190565b60006040518083038186803b1580156100eb57600080fd5b505afa1580156100ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261012791908101906104af565b608081015190915061017a81610140604089018961061d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061021192505050565b6101ca5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b866101d687358a610708565b6101e091906106e8565b93508686600001358361012001516101f89190610708565b61020291906106e8565b92505050965096945050505050565b6000816040516020016102249190610601565b604051602081830303815290604052805190602001208360405160200161024b9190610601565b6040516020818303038152906040528051906020012014905092915050565b805161027581610779565b919050565b600082601f83011261028a578081fd5b8151602061029f61029a836106c4565b610693565b80838252828201915082860187848660051b89010111156102be578586fd5b855b858110156102ff57815167ffffffffffffffff8111156102de578788fd5b6102ec8a87838c0101610378565b85525092840192908401906001016102c0565b5090979650505050505050565b600082601f83011261031c578081fd5b8151602061032c61029a836106c4565b80838252828201915082860187848660051b890101111561034b578586fd5b855b858110156102ff5781518452928401929084019060010161034d565b80516002811061027557600080fd5b600082601f830112610388578081fd5b815167ffffffffffffffff8111156103a2576103a2610763565b6103b5601f8201601f1916602001610693565b8181528460208386010111156103c9578283fd5b6103da826020830160208701610733565b949350505050565b60008060008060008060c087890312156103fa578182fd5b863561040581610779565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115610435578283fd5b87016080818a031215610446578283fd5b8092505060a087013590509295509295509295565b600080600080600080600060e0888a031215610475578081fd5b873561048081610779565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b6000602082840312156104c0578081fd5b815167ffffffffffffffff808211156104d7578283fd5b908301906101a082860312156104eb578283fd5b6104f3610669565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610526578485fd5b61053287828601610378565b60808301525061054460a08401610369565b60a082015261055560c0840161026a565b60c082015260e08301518281111561056b578485fd5b61057787828601610378565b60e08301525061010061058b81850161026a565b9082015261012083810151908201526101406105a881850161026a565b9082015261016083810151838111156105bf578586fd5b6105cb8882870161027a565b82840152505061018080840151838111156105e4578586fd5b6105f08882870161030c565b918301919091525095945050505050565b60008251610613818460208701610733565b9190910192915050565b6000808335601e19843603018112610633578283fd5b83018035915067ffffffffffffffff82111561064d578283fd5b60200191503681900382131561066257600080fd5b9250929050565b6040516101a0810167ffffffffffffffff8111828210171561068d5761068d610763565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106bc576106bc610763565b604052919050565b600067ffffffffffffffff8211156106de576106de610763565b5060051b60200190565b60008261070357634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561072e57634e487b7160e01b81526011600452602481fd5b500290565b60005b8381101561074e578181015183820152602001610736565b8381111561075d576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461079b57600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
