/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106fd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636a80fa101461003b578063812acab114610061575b600080fd5b61004e6100493660046103a8565b61008f565b6040519081526020015b60405180910390f35b61007f61006f366004610448565b60019a9950505050505050505050565b6040519015158152602001610058565b604051632e34059960e01b815260048101899052600090819073ffffffffffffffffffffffffffffffffffffffff8c1690632e3405999060240160006040518083038186803b1580156100e157600080fd5b505afa1580156100f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011d91908101906104da565b9050856020013581606001511461017a5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b87878481811061019a57634e487b7160e01b600052603260045260246000fd5b602002919091013590506101af87358b61068a565b6101b9919061066a565b9b9a5050505050505050505050565b80516101d3816106cb565b919050565b600082601f8301126101e8578081fd5b815160206101fd6101f883610646565b610615565b80838252828201915082860187848660051b890101111561021c578586fd5b855b8581101561025d57815167ffffffffffffffff81111561023c578788fd5b61024a8a87838c0101610320565b855250928401929084019060010161021e565b5090979650505050505050565b60008083601f84011261027b578182fd5b50813567ffffffffffffffff811115610292578182fd5b6020830191508360208260051b85010111156102ad57600080fd5b9250929050565b600082601f8301126102c4578081fd5b815160206102d46101f883610646565b80838252828201915082860187848660051b89010111156102f3578586fd5b855b8581101561025d578151845292840192908401906001016102f5565b8051600281106101d357600080fd5b600082601f830112610330578081fd5b815167ffffffffffffffff81111561034a5761034a6106b5565b602061035e601f8301601f19168201610615565b8281528582848701011115610371578384fd5b835b8381101561038e578581018301518282018401528201610373565b8381111561039e57848385840101525b5095945050505050565b6000806000806000806000806000898b036101408112156103c7578586fd5b8a356103d2816106cb565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156103fb578687fd5b6104078d828e0161026a565b9098509650506060607f198201121561041e578485fd5b50979a9699509497939650919460808401945060e084013593610100810135935061012001359150565b6000806000806000806000806000806101208b8d031215610467578081fd5b8a35610472816106cb565b995060208b0135985060408b0135975060608b013567ffffffffffffffff81111561049b578182fd5b6104a78d828e0161026a565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b6000602082840312156104eb578081fd5b815167ffffffffffffffff80821115610502578283fd5b908301906101408286031215610516578283fd5b61051e6105eb565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610551578485fd5b61055d87828601610320565b60808301525061056f60a08401610311565b60a082015261058060c084016101c8565b60c082015261059160e084016101c8565b60e082015261010080840151838111156105a9578586fd5b6105b5888287016101d8565b82840152505061012080840151838111156105ce578586fd5b6105da888287016102b4565b918301919091525095945050505050565b604051610140810167ffffffffffffffff8111828210171561060f5761060f6106b5565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561063e5761063e6106b5565b604052919050565b600067ffffffffffffffff821115610660576106606106b5565b5060051b60200190565b60008261068557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156106b057634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146106ed57600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
