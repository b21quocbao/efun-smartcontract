/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806357133daf1461003b578063a18e7b931461006c575b600080fd5b610057610049366004610467565b600198975050505050505050565b60405190151581526020015b60405180910390f35b61007f61007a3660046103e4565b610094565b60408051928352602083019190915201610063565b60008060008973ffffffffffffffffffffffffffffffffffffffff16632e3405998a6040518263ffffffff1660e01b81526004016100d491815260200190565b60006040518083038186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261012891908101906104c4565b608081015190915061017b8161014160408a018a610632565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061021392505050565b6101cb5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b876101d788358b61071d565b6101e191906106fd565b93508787600001358361012001516101f9919061071d565b61020391906106fd565b9250505097509795505050505050565b6000816040516020016102269190610616565b604051602081830303815290604052805190602001208360405160200161024d9190610616565b6040516020818303038152906040528051906020012014905092915050565b80516102778161078e565b919050565b600082601f83011261028c578081fd5b815160206102a161029c836106d9565b6106a8565b80838252828201915082860187848660051b89010111156102c0578586fd5b855b8581101561030157815167ffffffffffffffff8111156102e0578788fd5b6102ee8a87838c010161037a565b85525092840192908401906001016102c2565b5090979650505050505050565b600082601f83011261031e578081fd5b8151602061032e61029c836106d9565b80838252828201915082860187848660051b890101111561034d578586fd5b855b858110156103015781518452928401929084019060010161034f565b80516002811061027757600080fd5b600082601f83011261038a578081fd5b815167ffffffffffffffff8111156103a4576103a4610778565b6103b7601f8201601f19166020016106a8565b8181528460208386010111156103cb578283fd5b6103dc826020830160208701610748565b949350505050565b600080600080600080600060e0888a0312156103fe578283fd5b87356104098161078e565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff811115610439578384fd5b88016080818b03121561044a578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600080610100898b031215610483578081fd5b883561048e8161078e565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b6000602082840312156104d5578081fd5b815167ffffffffffffffff808211156104ec578283fd5b908301906101a08286031215610500578283fd5b61050861067e565b8251815260208301516020820152604083015160408201526060830151606082015260808301518281111561053b578485fd5b6105478782860161037a565b60808301525061055960a0840161036b565b60a082015261056a60c0840161026c565b60c082015260e083015182811115610580578485fd5b61058c8782860161037a565b60e0830152506101006105a081850161026c565b9082015261012083810151908201526101406105bd81850161026c565b9082015261016083810151838111156105d4578586fd5b6105e08882870161027c565b82840152505061018080840151838111156105f9578586fd5b6106058882870161030e565b918301919091525095945050505050565b60008251610628818460208701610748565b9190910192915050565b6000808335601e19843603018112610648578283fd5b83018035915067ffffffffffffffff821115610662578283fd5b60200191503681900382131561067757600080fd5b9250929050565b6040516101a0810167ffffffffffffffff811182821017156106a2576106a2610778565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106d1576106d1610778565b604052919050565b600067ffffffffffffffff8211156106f3576106f3610778565b5060051b60200190565b60008261071857634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561074357634e487b7160e01b81526011600452602481fd5b500290565b60005b8381101561076357818101518382015260200161074b565b83811115610772576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107b057600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
