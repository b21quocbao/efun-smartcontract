/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a02806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634f4d2e1e146100515780636341acbc14610077578063812acab11461008a57806383688316146100b8575b600080fd5b61006461005f36600461052f565b6100d5565b6040519081526020015b60405180910390f35b6100646100853660046105d4565b610175565b6100a8610098366004610706565b60019a9950505050505050505050565b604051901515815260200161006e565b6100646100c636600461067d565b60009998505050505050505050565b604051632e34059960e01b815260048101899052600090819073ffffffffffffffffffffffffffffffffffffffff8c1690632e3405999060240160006040518083038186803b15801561012757600080fd5b505afa15801561013b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101639190810190610798565b5060009b9a5050505050505050505050565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156101c757600080fd5b505afa1580156101db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102039190810190610798565b905086602001358160600151146102605760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b88888581811061028057634e487b7160e01b600052603260045260246000fd5b602002919091013590508735610296858d61094d565b6102a09190610985565b6102aa9190610965565b9c9b505050505050505050505050565b80516102c5816109d0565b919050565b600082601f8301126102da578081fd5b60405161018080820167ffffffffffffffff8382108183111715610300576103006109ba565b8160405283915085878488011115610316578586fd5b8593505b600c84101561035357805182811115610331578687fd5b61033d89828a016104a7565b845250600193909301926020928301920161031a565b50929695505050505050565b600082601f83011261036f578081fd5b8151602061038461037f83610929565b6108f8565b80838252828201915082860187848660051b89010111156103a3578586fd5b855b858110156103e457815167ffffffffffffffff8111156103c3578788fd5b6103d18a87838c01016104a7565b85525092840192908401906001016103a5565b5090979650505050505050565b60008083601f840112610402578182fd5b50813567ffffffffffffffff811115610419578182fd5b6020830191508360208260051b850101111561043457600080fd5b9250929050565b600082601f83011261044b578081fd5b8151602061045b61037f83610929565b80838252828201915082860187848660051b890101111561047a578586fd5b855b858110156103e45781518452928401929084019060010161047c565b8051600281106102c557600080fd5b600082601f8301126104b7578081fd5b815167ffffffffffffffff8111156104d1576104d16109ba565b60206104e5601f8301601f191682016108f8565b82815285828487010111156104f8578384fd5b835b838110156105155785810183015182820184015282016104fa565b8381111561052557848385840101525b5095945050505050565b600080600080600080600080600060e08a8c03121561054c578485fd5b8935610557816109d0565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610581578687fd5b61058d8d838e016103f1565b909850965060808c01359150808211156105a5578586fd5b506105b28c828d016103f1565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000808a8c036101608112156105f4578182fd5b8b356105ff816109d0565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610628578283fd5b6106348e828f016103f1565b9099509750506060607f198201121561064b578182fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c03121561069b578283fd5b89356106a6816109d0565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8111156106cf578384fd5b6106db8c828d016103f1565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610725578384fd5b8a35610730816109d0565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610759578485fd5b6107658d828e016103f1565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b6000602082840312156107a9578081fd5b815167ffffffffffffffff808211156107c0578283fd5b9083019061016082860312156107d4578283fd5b6107dc6108ce565b8251815260208301516020820152604083015160408201526060830151606082015260808301518281111561080f578485fd5b61081b878286016104a7565b60808301525061082d60a08401610498565b60a082015261083e60c084016102ba565b60c082015261084f60e084016102ba565b60e08201526101008084015183811115610867578586fd5b6108738882870161035f565b828401525050610120808401518381111561088c578586fd5b6108988882870161043b565b82840152505061014080840151838111156108b1578586fd5b6108bd888287016102ca565b918301919091525095945050505050565b604051610160810167ffffffffffffffff811182821017156108f2576108f26109ba565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610921576109216109ba565b604052919050565b600067ffffffffffffffff821115610943576109436109ba565b5060051b60200190565b60008219821115610960576109606109a4565b500190565b60008261098057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561099f5761099f6109a4565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146109f257600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
