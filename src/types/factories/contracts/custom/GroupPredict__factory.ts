/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100d357806394558f0a146100f057600080fd5b80634f4d2e1e1461006c5780636341acbc14610092575b600080fd5b61007f61007a3660046105fa565b610103565b6040519081526020015b60405180910390f35b61007f6100a036600461069f565b610196565b6100c36100b33660046107d1565b60019a9950505050505050505050565b6040519015158152602001610089565b61007f6100e1366004610748565b60009998505050505050505050565b61007f6100fe3660046107d1565b6102ce565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561014857600080fd5b505afa15801561015c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101849190810190610863565b5060009b9a5050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102179190810190610863565b905086602001358160600151146102745760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b88888581811061029457634e487b7160e01b600052603260045260246000fd5b6020029190910135905087356102aa858d610a18565b6102b49190610a50565b6102be9190610a30565b9c9b505050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561031357600080fd5b505afa158015610327573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034f9190810190610863565b905088888581811061037157634e487b7160e01b600052603260045260246000fd5b9050602002013587848c6102aa9190610a18565b805161039081610a9b565b919050565b600082601f8301126103a5578081fd5b60405161018080820167ffffffffffffffff83821081831117156103cb576103cb610a85565b81604052839150858784880111156103e1578586fd5b8593505b600c84101561041e578051828111156103fc578687fd5b61040889828a01610572565b84525060019390930192602092830192016103e5565b50929695505050505050565b600082601f83011261043a578081fd5b8151602061044f61044a836109f4565b6109c3565b80838252828201915082860187848660051b890101111561046e578586fd5b855b858110156104af57815167ffffffffffffffff81111561048e578788fd5b61049c8a87838c0101610572565b8552509284019290840190600101610470565b5090979650505050505050565b60008083601f8401126104cd578182fd5b50813567ffffffffffffffff8111156104e4578182fd5b6020830191508360208260051b85010111156104ff57600080fd5b9250929050565b600082601f830112610516578081fd5b8151602061052661044a836109f4565b80838252828201915082860187848660051b8901011115610545578586fd5b855b858110156104af57815184529284019290840190600101610547565b80516002811061039057600080fd5b600082601f830112610582578081fd5b815167ffffffffffffffff81111561059c5761059c610a85565b60206105b0601f8301601f191682016109c3565b82815285828487010111156105c3578384fd5b835b838110156105e05785810183015182820184015282016105c5565b838111156105f057848385840101525b5095945050505050565b600080600080600080600080600060e08a8c031215610617578485fd5b893561062281610a9b565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8082111561064c578687fd5b6106588d838e016104bc565b909850965060808c0135915080821115610670578586fd5b5061067d8c828d016104bc565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000808a8c036101608112156106bf578182fd5b8b356106ca81610a9b565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff8111156106f3578283fd5b6106ff8e828f016104bc565b9099509750506060607f1982011215610716578182fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c031215610766578283fd5b893561077181610a9b565b985060208a0135975060408a0135965060608a013567ffffffffffffffff81111561079a578384fd5b6107a68c828d016104bc565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d0312156107f0578384fd5b8a356107fb81610a9b565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610824578485fd5b6108308d828e016104bc565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610874578081fd5b815167ffffffffffffffff8082111561088b578283fd5b90830190610160828603121561089f578283fd5b6108a7610999565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156108da578485fd5b6108e687828601610572565b6080830152506108f860a08401610563565b60a082015261090960c08401610385565b60c082015261091a60e08401610385565b60e08201526101008084015183811115610932578586fd5b61093e8882870161042a565b8284015250506101208084015183811115610957578586fd5b61096388828701610506565b828401525050610140808401518381111561097c578586fd5b61098888828701610395565b918301919091525095945050505050565b604051610160810167ffffffffffffffff811182821017156109bd576109bd610a85565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109ec576109ec610a85565b604052919050565b600067ffffffffffffffff821115610a0e57610a0e610a85565b5060051b60200190565b60008219821115610a2b57610a2b610a6f565b500190565b600082610a4b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610a6a57610a6a610a6f565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab057600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
