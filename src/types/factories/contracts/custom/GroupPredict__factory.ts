/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dc5e10981461003b578063fa29edd914610068575b600080fd5b61004e6100493660046103e6565b610095565b604080519283526020830191909152015b60405180910390f35b610085610076366004610470565b60019998505050505050505050565b604051901515815260200161005f565b60008060008a73ffffffffffffffffffffffffffffffffffffffff16632e3405998b6040518263ffffffff1660e01b81526004016100d591815260200190565b60006040518083038186803b1580156100ed57600080fd5b505afa158015610101573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261012991908101906104d7565b608081015190915061017c8161014260408b018b610645565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061021592505050565b6101cc5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b886101d889358c610730565b6101e29190610710565b93508888600001358361012001516101fa9190610730565b6102049190610710565b925050509850989650505050505050565b6000816040516020016102289190610629565b604051602081830303815290604052805190602001208360405160200161024f9190610629565b6040516020818303038152906040528051906020012014905092915050565b8051610279816107a1565b919050565b600082601f83011261028e578081fd5b815160206102a361029e836106ec565b6106bb565b80838252828201915082860187848660051b89010111156102c2578586fd5b855b8581101561030357815167ffffffffffffffff8111156102e2578788fd5b6102f08a87838c010161037c565b85525092840192908401906001016102c4565b5090979650505050505050565b600082601f830112610320578081fd5b8151602061033061029e836106ec565b80838252828201915082860187848660051b890101111561034f578586fd5b855b8581101561030357815184529284019290840190600101610351565b80516002811061027957600080fd5b600082601f83011261038c578081fd5b815167ffffffffffffffff8111156103a6576103a661078b565b6103b9601f8201601f19166020016106bb565b8181528460208386010111156103cd578283fd5b6103de82602083016020870161075b565b949350505050565b600080600080600080600080610100898b031215610402578384fd5b883561040d816107a1565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff81111561043d578485fd5b89016080818c03121561044e578485fd5b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060008060006101208a8c03121561048e578081fd5b8935610499816107a1565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b6000602082840312156104e8578081fd5b815167ffffffffffffffff808211156104ff578283fd5b908301906101a08286031215610513578283fd5b61051b610691565b8251815260208301516020820152604083015160408201526060830151606082015260808301518281111561054e578485fd5b61055a8782860161037c565b60808301525061056c60a0840161036d565b60a082015261057d60c0840161026e565b60c082015260e083015182811115610593578485fd5b61059f8782860161037c565b60e0830152506101006105b381850161026e565b9082015261012083810151908201526101406105d081850161026e565b9082015261016083810151838111156105e7578586fd5b6105f38882870161027e565b828401525050610180808401518381111561060c578586fd5b61061888828701610310565b918301919091525095945050505050565b6000825161063b81846020870161075b565b9190910192915050565b6000808335601e1984360301811261065b578283fd5b83018035915067ffffffffffffffff821115610675578283fd5b60200191503681900382131561068a57600080fd5b9250929050565b6040516101a0810167ffffffffffffffff811182821017156106b5576106b561078b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106e4576106e461078b565b604052919050565b600067ffffffffffffffff8211156107065761070661078b565b5060051b60200190565b60008261072b57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561075657634e487b7160e01b81526011600452602481fd5b500290565b60005b8381101561077657818101518382015260200161075e565b83811115610785576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107c357600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
