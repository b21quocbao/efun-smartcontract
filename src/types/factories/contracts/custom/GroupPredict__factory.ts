/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GroupPredict,
  GroupPredictInterface,
} from "../../../contracts/custom/GroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610773806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dc5e10981461003b578063fa29edd914610061575b600080fd5b61004e6100493660046103b5565b61008e565b6040519081526020015b60405180910390f35b61007e61006f36600461043f565b60019998505050505050505050565b6040519015158152602001610058565b604051632e34059960e01b815260048101889052600090819073ffffffffffffffffffffffffffffffffffffffff8b1690632e3405999060240160006040518083038186803b1580156100e057600080fd5b505afa1580156100f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011c91908101906104a6565b606081015190915061016f8161013560408a018a6105e5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101e492505050565b6101bf5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b876101cb88358b6106d0565b6101d591906106b0565b9b9a5050505050505050505050565b6000816040516020016101f791906105c9565b604051602081830303815290604052805190602001208360405160200161021e91906105c9565b6040516020818303038152906040528051906020012014905092915050565b805161024881610741565b919050565b600082601f83011261025d578081fd5b8151602061027261026d8361068c565b61065b565b80838252828201915082860187848660051b8901011115610291578586fd5b855b858110156102d257815167ffffffffffffffff8111156102b1578788fd5b6102bf8a87838c010161034b565b8552509284019290840190600101610293565b5090979650505050505050565b600082601f8301126102ef578081fd5b815160206102ff61026d8361068c565b80838252828201915082860187848660051b890101111561031e578586fd5b855b858110156102d257815184529284019290840190600101610320565b80516002811061024857600080fd5b600082601f83011261035b578081fd5b815167ffffffffffffffff8111156103755761037561072b565b610388601f8201601f191660200161065b565b81815284602083860101111561039c578283fd5b6103ad8260208301602087016106fb565b949350505050565b600080600080600080600080610100898b0312156103d1578384fd5b88356103dc81610741565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff81111561040c578485fd5b89016080818c03121561041d578485fd5b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060008060006101208a8c03121561045d578081fd5b893561046881610741565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b6000602082840312156104b7578081fd5b815167ffffffffffffffff808211156104ce578283fd5b9083019061016082860312156104e2578283fd5b6104ea610631565b825181526020830151602082015260408301516040820152606083015182811115610513578485fd5b61051f8782860161034b565b6060830152506105316080840161033c565b608082015261054260a0840161023d565b60a082015261055360c0840161023d565b60c082015260e083015160e082015261010061057081850161023d565b908201526101208381015183811115610587578586fd5b6105938882870161024d565b82840152505061014080840151838111156105ac578586fd5b6105b8888287016102df565b918301919091525095945050505050565b600082516105db8184602087016106fb565b9190910192915050565b6000808335601e198436030181126105fb578283fd5b83018035915067ffffffffffffffff821115610615578283fd5b60200191503681900382131561062a57600080fd5b9250929050565b604051610160810167ffffffffffffffff811182821017156106555761065561072b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106845761068461072b565b604052919050565b600067ffffffffffffffff8211156106a6576106a661072b565b5060051b60200190565b6000826106cb57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156106f657634e487b7160e01b81526011600452602481fd5b500290565b60005b838110156107165781810151838201526020016106fe565b83811115610725576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461076357600080fd5b5056fea164736f6c6343000804000a";

type GroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPredict__factory extends ContractFactory {
  constructor(...args: GroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GroupPredict> {
    return super.deploy(overrides || {}) as Promise<GroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPredict {
    return super.attach(address) as GroupPredict;
  }
  override connect(signer: Signer): GroupPredict__factory {
    return super.connect(signer) as GroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPredictInterface {
    return new utils.Interface(_abi) as GroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPredict {
    return new Contract(address, _abi, signerOrProvider) as GroupPredict;
  }
}
