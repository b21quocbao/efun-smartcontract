/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandicapGroupPredict,
  HandicapGroupPredictInterface,
} from "../../../../contracts/custom/HandicapGroupPredict.sol/HandicapGroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRewardSponsor",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateSponsor",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cf1806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063812acab11161005b578063812acab1146100ce57806383688316146100fc5780638d1d6ea61461011957806394558f0a1461012c57600080fd5b8063061bf2dc146100825780634f4d2e1e146100a8578063693d113b146100bb575b600080fd5b61009561009036600461092a565b61013f565b6040519081526020015b60405180910390f35b6100956100b63660046107e2565b610409565b6100956100c9366004610887565b6104da565b6100ec6100dc366004610a70565b60019a9950505050505050505050565b604051901515815260200161009f565b61009561010a3660046109e7565b60009998505050505050505050565b610095610127366004610a70565b6105ac565b61009561013a366004610a70565b610603565b604051632e34059960e01b8152600481018b905260009081906001600160a01b038e1690632e3405999060240160006040518083038186803b15801561018457600080fd5b505afa158015610198573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c09190810190610b02565b90506020880135831561024957801580156101e057508160600151600414155b806101f957508060041480156101f95750606082015115155b6102495760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8015801561025957506060820151155b806102735750806004148015610273575081606001516004145b156102c5578a8a8781811061029857634e487b7160e01b600052603260045260246000fd5b6020029190910135905089356102ae878f610c49565b6102b89190610c81565b6102c29190610c61565b92505b801580156102d7575081606001516001145b806102f157508060041480156102f1575081606001516003145b15610382578a8a8781811061031657634e487b7160e01b600052603260045260246000fd5b9050602002013589600001358660028f8f8f8c81811061034657634e487b7160e01b600052603260045260246000fd5b905060200201356103579190610c49565b6103619190610c61565b61036b9190610c49565b6103759190610c81565b61037f9190610c61565b92505b80158015610394575081606001516002145b806103ae57508060041480156103ae575081606001516002145b156103b857883592505b801580156103ca575081606001516003145b806103e457508060041480156103e4575081606001516001145b156103f8576103f560028a35610c61565b92505b50509b9a5050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048a9190810190610b02565b9050878782606001518181106104b057634e487b7160e01b600052603260045260246000fd5b90506020020135600014156104c7578291506104cc565b600091505b509998505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055b9190810190610b02565b905088888581811061057d57634e487b7160e01b600052603260045260246000fd5b60200291909101359050610592883585610c81565b61059c9190610c61565b9c9b505050505050505050505050565b6000858888858181106105cf57634e487b7160e01b600052603260045260246000fd5b905060200201356105e09190610c49565b6105ea8784610c81565b6105f49190610c61565b9b9a5050505050505050505050565b60008588888581811061062657634e487b7160e01b600052603260045260246000fd5b905060200201356106379190610c49565b8680610643858d610c49565b61064d9190610c49565b6105ea9190610c81565b805161066281610ccc565b919050565b60008083601f840112610678578182fd5b50813567ffffffffffffffff81111561068f578182fd5b6020830191508360208260051b85010111156106aa57600080fd5b9250929050565b600082601f8301126106c1578081fd5b8151602067ffffffffffffffff8211156106dd576106dd610cb6565b8160051b6106ec828201610c18565b838152828101908684018388018501891015610706578687fd5b8693505b8584101561072857805183526001939093019291840191840161070a565b50979650505050505050565b80516002811061066257600080fd5b600082601f830112610753578081fd5b815167ffffffffffffffff81111561076d5761076d610cb6565b6020610781601f8301601f19168201610c18565b8281528582848701011115610794578384fd5b835b838110156107b1578581018301518282018401528201610796565b838111156107c157848385840101525b5095945050505050565b6000606082840312156107dc578081fd5b50919050565b600080600080600080600080600060e08a8c0312156107ff578485fd5b893561080a81610ccc565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610834578687fd5b6108408d838e01610667565b909850965060808c0135915080821115610858578586fd5b506108658c828d01610667565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000806101608b8d0312156108a6578081fd5b8a356108b181610ccc565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156108da578182fd5b6108e68d828e01610667565b90985096506108fa90508c60808d016107cb565b945060e08b013593506101008b013592506101208b013591506101408b013590509295989b9194979a5092959850565b60008060008060008060008060008060006101808c8e03121561094b578081fd5b8b3561095681610ccc565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff81111561097f578182fd5b61098b8e828f01610667565b909950975061099f90508d60808e016107cb565b955060e08c013594506101008c013593506101208c013592506101408c013591506101608c013580151581146109d3578182fd5b809150509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610a05578283fd5b8935610a1081610ccc565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610a39578384fd5b610a458c828d01610667565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610a8f578384fd5b8a35610a9a81610ccc565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610ac3578485fd5b610acf8d828e01610667565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610b13578081fd5b815167ffffffffffffffff80821115610b2a578283fd5b908301906101208286031215610b3e578283fd5b610b46610bee565b82518152602083015160208201526040830151604082015260608301516060820152610b7460808401610734565b6080820152610b8560a08401610657565b60a0820152610b9660c08401610657565b60c082015260e083015182811115610bac578485fd5b610bb8878286016106b1565b60e0830152506101008084015183811115610bd1578586fd5b610bdd88828701610743565b918301919091525095945050505050565b604051610120810167ffffffffffffffff81118282101715610c1257610c12610cb6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4157610c41610cb6565b604052919050565b60008219821115610c5c57610c5c610ca0565b500190565b600082610c7c57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610c9b57610c9b610ca0565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ce157600080fd5b5056fea164736f6c6343000804000a";

type HandicapGroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapGroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HandicapGroupPredict__factory extends ContractFactory {
  constructor(...args: HandicapGroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HandicapGroupPredict> {
    return super.deploy(overrides || {}) as Promise<HandicapGroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandicapGroupPredict {
    return super.attach(address) as HandicapGroupPredict;
  }
  override connect(signer: Signer): HandicapGroupPredict__factory {
    return super.connect(signer) as HandicapGroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapGroupPredictInterface {
    return new utils.Interface(_abi) as HandicapGroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandicapGroupPredict {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as HandicapGroupPredict;
  }
}
