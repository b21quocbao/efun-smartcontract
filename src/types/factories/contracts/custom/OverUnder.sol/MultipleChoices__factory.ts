/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultipleChoices,
  MultipleChoicesInterface,
} from "../../../../contracts/custom/OverUnder.sol/MultipleChoices";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106d2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c064c60e1461003b578063fa29edd914610061575b600080fd5b61004e61004936600461037b565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046103f2565b610193565b6040519015158152602001610058565b604051632e34059960e01b815260048101889052600090819073ffffffffffffffffffffffffffffffffffffffff8b1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101129190810190610459565b9050856020013581606001511461016f5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8361017b86883561063e565b610185919061061e565b9a9950505050505050505050565b600080856101a1888a610606565b6101ab919061063e565b84866101b78a8d610606565b6101c19190610606565b6101cb919061063e565b6101d5919061065d565b10159a9950505050505050505050565b80516101f0816106a0565b919050565b600082601f830112610205578081fd5b8151602061021a610215836105e2565b6105b1565b80838252828201915082860187848660051b8901011115610239578586fd5b855b8581101561027a57815167ffffffffffffffff811115610259578788fd5b6102678a87838c01016102f3565b855250928401929084019060010161023b565b5090979650505050505050565b600082601f830112610297578081fd5b815160206102a7610215836105e2565b80838252828201915082860187848660051b89010111156102c6578586fd5b855b8581101561027a578151845292840192908401906001016102c8565b8051600281106101f057600080fd5b600082601f830112610303578081fd5b815167ffffffffffffffff81111561031d5761031d61068a565b6020610331601f8301601f191682016105b1565b8281528582848701011115610344578384fd5b835b83811015610361578581018301518282018401528201610346565b8381111561037157848385840101525b5095945050505050565b600080600080600080600080888a03610140811215610398578485fd5b89356103a3816106a0565b985060208a0135975060408a013596506060808b01359650607f19820112156103ca578485fd5b50969995985093969295505050608081019260e0820135925061010082013591610120013590565b60008060008060008060008060006101208a8c031215610410578081fd5b893561041b816106a0565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b60006020828403121561046a578081fd5b815167ffffffffffffffff80821115610481578283fd5b908301906101808286031215610495578283fd5b61049d610587565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156104d0578485fd5b6104dc878286016102f3565b6080830152506104ee60a084016102e4565b60a08201526104ff60c084016101e5565b60c082015261051060e084016101e5565b60e0820152610100838101519082015261012061052e8185016101e5565b908201526101408381015183811115610545578586fd5b610551888287016101f5565b828401525050610160808401518381111561056a578586fd5b61057688828701610287565b918301919091525095945050505050565b604051610180810167ffffffffffffffff811182821017156105ab576105ab61068a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105da576105da61068a565b604052919050565b600067ffffffffffffffff8211156105fc576105fc61068a565b5060051b60200190565b6000821982111561061957610619610674565b500190565b60008261063957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561065857610658610674565b500290565b60008282101561066f5761066f610674565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146106c257600080fd5b5056fea164736f6c6343000804000a";

type MultipleChoicesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleChoicesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleChoices__factory extends ContractFactory {
  constructor(...args: MultipleChoicesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultipleChoices> {
    return super.deploy(overrides || {}) as Promise<MultipleChoices>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleChoices {
    return super.attach(address) as MultipleChoices;
  }
  override connect(signer: Signer): MultipleChoices__factory {
    return super.connect(signer) as MultipleChoices__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleChoicesInterface {
    return new utils.Interface(_abi) as MultipleChoicesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleChoices {
    return new Contract(address, _abi, signerOrProvider) as MultipleChoices;
  }
}
