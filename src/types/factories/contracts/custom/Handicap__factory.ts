/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Handicap,
  HandicapInterface,
} from "../../../contracts/custom/Handicap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ee0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100c857806394558f0a146100db57600080fd5b8063061bf2dc1461006c5780634f4d2e1e14610092575b600080fd5b61007f61007a366004610ae5565b6100ee565b6040519081526020015b60405180910390f35b61007f6100a0366004610a40565b61034c565b6100b86100b3366004610c2d565b6106e8565b6040519015158152602001610089565b61007f6100d6366004610ba4565b610785565b61007f6100e9366004610c2d565b610814565b604051632e34059960e01b8152600481018b905260009081906001600160a01b038e1690632e3405999060240160006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016f9190810190610cbf565b9050602088013583156101fd578015801561018f57508160600151600414155b806101a857508060041480156101a85750606082015115155b6101f85760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b61021c565b86610209898b35610e3e565b6102139190610e1e565b9250505061033d565b8015801561022c57506060820151155b806102465750806004148015610246575081606001516004145b156102645786610257898b35610e3e565b6102619190610e1e565b92505b80158015610276575081606001516001145b806102905750806004148015610290575081606001516003145b156102c4578660026102a28a83610e06565b6102ad908c35610e3e565b6102b79190610e1e565b6102c19190610e1e565b92505b801580156102d6575081606001516002145b806102f057508060041480156102f0575081606001516002145b156102fa57883592505b8015801561030c575081606001516003145b806103265750806004148015610326575081606001516001145b1561033a5761033760028a35610e1e565b92505b50505b9b9a5050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561039157600080fd5b505afa1580156103a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103cd9190810190610cbf565b90508291506000428260400151620151806103e89190610e06565b1115801561041a575060018260800151600181111561041757634e487b7160e01b600052602160045260246000fd5b14155b905080156104295750506106db565b60005b888110156106d75789898281811061045457634e487b7160e01b600052603260045260246000fd5b90506020020135846104669190610e06565b93508015801561047b57508260600151600414155b8061049457508060041480156104945750606083015115155b156106c757801580156104a957506060830151155b806104c357508060041480156104c3575082606001516004145b1561053857858888838181106104e957634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8481811061051057634e487b7160e01b600052603260045260246000fd5b905060200201356105219190610e3e565b61052b9190610e1e565b6105359085610e5d565b93505b8015801561054a575082606001516001145b806105645750806004148015610564575082606001516003145b156105f05785600289898481811061058c57634e487b7160e01b600052603260045260246000fd5b905060200201358861059e9190610e06565b8c8c858181106105be57634e487b7160e01b600052603260045260246000fd5b905060200201356105cf9190610e3e565b6105d99190610e1e565b6105e39190610e1e565b6105ed9085610e5d565b93505b80158015610602575082606001516002145b8061061c575080600414801561061c575082606001516002145b156106565789898281811061064157634e487b7160e01b600052603260045260246000fd5b90506020020135846106539190610e5d565b93505b80158015610668575082606001516003145b806106825750806004148015610682575082606001516001145b156106c75760028a8a838181106106a957634e487b7160e01b600052603260045260246000fd5b905060200201356106ba9190610e1e565b6106c49085610e5d565b93505b6106d081610e74565b905061042c565b5050505b9998505050505050505050565b60008083856106f7898d610e06565b6107019190610e06565b61070b9190610e3e565b90506000878a8a8681811061073057634e487b7160e01b600052603260045260246000fd5b905060200201356107419190610e06565b9050600061074f8883610e3e565b90508083101560008615806107645750866004145b90508180156107705750805b955050505050509a9950505050505050505050565b600080610792858a610e06565b9050600084878a8a878181106107b857634e487b7160e01b600052603260045260246000fd5b905060200201356107c99190610e3e565b6107d39190610e1e565b905060006107e18689610e5d565b905080866107ef8486610e5d565b6107f99190610e3e565b6108039190610e1e565b9d9c50505050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561085957600080fd5b505afa15801561086d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108959190810190610cbf565b9050846108a28789610e3e565b6108ac9190610e1e565b9c9b505050505050505050505050565b80516108c781610ebb565b919050565b60008083601f8401126108dd578182fd5b50813567ffffffffffffffff8111156108f4578182fd5b6020830191508360208260051b850101111561090f57600080fd5b9250929050565b600082601f830112610926578081fd5b8151602067ffffffffffffffff82111561094257610942610ea5565b8160051b610951828201610dd5565b83815282810190868401838801850189101561096b578687fd5b8693505b8584101561098d57805183526001939093019291840191840161096f565b50979650505050505050565b803580151581146108c757600080fd5b8051600281106108c757600080fd5b600082601f8301126109c8578081fd5b815167ffffffffffffffff8111156109e2576109e2610ea5565b60206109f6601f8301601f19168201610dd5565b8281528582848701011115610a09578384fd5b835b83811015610a26578581018301518282018401528201610a0b565b83811115610a3657848385840101525b5095945050505050565b600080600080600080600080600060e08a8c031215610a5d578485fd5b8935610a6881610ebb565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610a92578687fd5b610a9e8d838e016108cc565b909850965060808c0135915080821115610ab6578586fd5b50610ac38c828d016108cc565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b60008060008060008060008060008060006101808c8e031215610b06578182fd5b610b108c35610ebb565b8b359a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610b3b578283fd5b610b478e828f016108cc565b90995097505060608c8e03607f19011215610b60578182fd5b60808c01955060e08c013594506101008c013593506101208c013592506101408c01359150610b926101608d01610999565b90509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610bc2578485fd5b8935610bcd81610ebb565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610bf6578586fd5b610c028c828d016108cc565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610c4c578384fd5b8a35610c5781610ebb565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610c80578485fd5b610c8c8d828e016108cc565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610cd0578081fd5b815167ffffffffffffffff80821115610ce7578283fd5b908301906101208286031215610cfb578283fd5b610d03610dab565b82518152602083015160208201526040830151604082015260608301516060820152610d31608084016109a9565b6080820152610d4260a084016108bc565b60a0820152610d5360c084016108bc565b60c082015260e083015182811115610d69578485fd5b610d7587828601610916565b60e0830152506101008084015183811115610d8e578586fd5b610d9a888287016109b8565b918301919091525095945050505050565b604051610120810167ffffffffffffffff81118282101715610dcf57610dcf610ea5565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dfe57610dfe610ea5565b604052919050565b60008219821115610e1957610e19610e8f565b500190565b600082610e3957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610e5857610e58610e8f565b500290565b600082821015610e6f57610e6f610e8f565b500390565b6000600019821415610e8857610e88610e8f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ed057600080fd5b5056fea164736f6c6343000804000a";

type HandicapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Handicap__factory extends ContractFactory {
  constructor(...args: HandicapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Handicap> {
    return super.deploy(overrides || {}) as Promise<Handicap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Handicap {
    return super.attach(address) as Handicap;
  }
  override connect(signer: Signer): Handicap__factory {
    return super.connect(signer) as Handicap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapInterface {
    return new utils.Interface(_abi) as HandicapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Handicap {
    return new Contract(address, _abi, signerOrProvider) as Handicap;
  }
}
