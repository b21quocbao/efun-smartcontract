/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Handicap,
  HandicapInterface,
} from "../../../contracts/custom/Handicap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109a4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636a80fa101461003b578063812acab114610061575b600080fd5b61004e610049366004610616565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046106b6565b6102c2565b6040519015158152602001610058565b604051632e34059960e01b815260048101899052600090819073ffffffffffffffffffffffffffffffffffffffff8c1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101129190810190610748565b905060208601358015801561012c57508160600151600414155b8061014557508060041480156101455750606082015115155b6101955760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b801580156101a557506060820151155b806101bf57508060011480156101bf575081606001516004145b156101dd57846101d0878935610910565b6101da91906108f0565b92505b801580156101ef575081606001516001145b806102095750806001148015610209575081606001516003145b1561023d5784600261021b88836108d8565b610226908a35610910565b61023091906108f0565b61023a91906108f0565b92505b8015801561024f575081606001516002145b806102695750806001148015610269575081606001516002145b1561027357863592505b80158015610285575081606001516003145b8061029f575080600114801561029f575081606001516001145b156102b3576102b0600288356108f0565b92505b50509998505050505050505050565b60008083856102d1898d6108d8565b6102db91906108d8565b6102e59190610910565b90506000878a8a8681811061030a57634e487b7160e01b600052603260045260246000fd5b9050602002013561031b91906108d8565b905060008a8a8681811061033f57634e487b7160e01b600052603260045260246000fd5b905060200201358c610351919061092f565b9050600061035f8984610910565b90506000600261036f898c6108d8565b6103799086610910565b61038391906108f0565b905060006103926002866108f0565b9050600060026103a28b8e6108d8565b6103ac9087610910565b6103b691906108f0565b905060006103c56002876108f0565b90508488101560006103d783876108d8565b8a1015905060006103e886866108d8565b8b1015905060008d15806103fc57508d6004145b90508380156104085750825b80156104115750815b801561041a5750805b9c505050505050505050505050509a9950505050505050505050565b805161044181610972565b919050565b600082601f830112610456578081fd5b8151602061046b610466836108b4565b610883565b80838252828201915082860187848660051b890101111561048a578586fd5b855b858110156104cb57815167ffffffffffffffff8111156104aa578788fd5b6104b88a87838c010161058e565b855250928401929084019060010161048c565b5090979650505050505050565b60008083601f8401126104e9578182fd5b50813567ffffffffffffffff811115610500578182fd5b6020830191508360208260051b850101111561051b57600080fd5b9250929050565b600082601f830112610532578081fd5b81516020610542610466836108b4565b80838252828201915082860187848660051b8901011115610561578586fd5b855b858110156104cb57815184529284019290840190600101610563565b80516002811061044157600080fd5b600082601f83011261059e578081fd5b815167ffffffffffffffff8111156105b8576105b861095c565b60206105cc601f8301601f19168201610883565b82815285828487010111156105df578384fd5b835b838110156105fc5785810183015182820184015282016105e1565b8381111561060c57848385840101525b5095945050505050565b6000806000806000806000806000898b03610140811215610635578586fd5b8a3561064081610972565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610669578687fd5b6106758d828e016104d8565b9098509650506060607f198201121561068c578485fd5b50979a9699509497939650919460808401945060e084013593610100810135935061012001359150565b6000806000806000806000806000806101208b8d0312156106d5578081fd5b8a356106e081610972565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610709578182fd5b6107158d828e016104d8565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610759578081fd5b815167ffffffffffffffff80821115610770578283fd5b908301906101408286031215610784578283fd5b61078c610859565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156107bf578485fd5b6107cb8782860161058e565b6080830152506107dd60a0840161057f565b60a08201526107ee60c08401610436565b60c08201526107ff60e08401610436565b60e08201526101008084015183811115610817578586fd5b61082388828701610446565b828401525050610120808401518381111561083c578586fd5b61084888828701610522565b918301919091525095945050505050565b604051610140810167ffffffffffffffff8111828210171561087d5761087d61095c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156108ac576108ac61095c565b604052919050565b600067ffffffffffffffff8211156108ce576108ce61095c565b5060051b60200190565b600082198211156108eb576108eb610946565b500190565b60008261090b57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561092a5761092a610946565b500290565b60008282101561094157610941610946565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461099457600080fd5b5056fea164736f6c6343000804000a";

type HandicapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Handicap__factory extends ContractFactory {
  constructor(...args: HandicapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Handicap> {
    return super.deploy(overrides || {}) as Promise<Handicap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Handicap {
    return super.attach(address) as Handicap;
  }
  override connect(signer: Signer): Handicap__factory {
    return super.connect(signer) as Handicap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapInterface {
    return new utils.Interface(_abi) as HandicapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Handicap {
    return new Contract(address, _abi, signerOrProvider) as Handicap;
  }
}
