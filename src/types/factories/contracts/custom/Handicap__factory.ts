/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Handicap,
  HandicapInterface,
} from "../../../contracts/custom/Handicap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dc5e10981461003b578063fa29edd914610061575b600080fd5b61004e610049366004610643565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046106cd565b6102eb565b6040519015158152602001610058565b604051632e34059960e01b815260048101889052600090819073ffffffffffffffffffffffffffffffffffffffff8b1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101129190810190610734565b9050600061016982610120015188806040019061012f9190610873565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061040e92505050565b90508015801561017a575083600414155b8061018f575080600414801561018f57508315155b6101df5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b801580156101eb575083155b8061020157508060011480156102015750836004145b1561021f5784610212878935610976565b61021c9190610956565b92505b8015801561022d5750836001145b8061024357508060011480156102435750836003145b1561027757846002610255888361093e565b610260908a35610976565b61026a9190610956565b6102749190610956565b92505b801580156102855750836002145b8061029b575080600114801561029b5750836002145b156102a557863592505b801580156102b35750836003145b806102c957508060011480156102c95750836001145b156102dd576102da60028835610956565b92505b505098975050505050505050565b60008083856102fa898c61093e565b610304919061093e565b61030e9190610976565b9050600061031c888a61093e565b9050600061032a8a8c610995565b905060006103388984610976565b905060006002610348898c61093e565b6103529086610976565b61035c9190610956565b9050600061036b600286610956565b90506000600261037b8b8e61093e565b6103859087610976565b61038f9190610956565b9050600061039e600287610956565b90508488101560006103b0838761093e565b8a1015905060006103c1868661093e565b8b1015905060008d15806103d557508d6004145b90508380156103e15750825b80156103ea5750815b80156103f35750805b9c505050505050505050505050509998505050505050505050565b6000805b835181101561046a5761044c84828151811061043e57634e487b7160e01b600052603260045260246000fd5b602002602001015184610472565b1561045857905061046c565b80610462816109dc565b915050610412565b505b92915050565b6000816040516020016104859190610857565b60405160208183030381529060405280519060200120836040516020016104ac9190610857565b6040516020818303038152906040528051906020012014905092915050565b80516104d681610a23565b919050565b600082601f8301126104eb578081fd5b815160206105006104fb8361091a565b6108e9565b80838252828201915082860187848660051b890101111561051f578586fd5b855b8581101561056057815167ffffffffffffffff81111561053f578788fd5b61054d8a87838c01016105d9565b8552509284019290840190600101610521565b5090979650505050505050565b600082601f83011261057d578081fd5b8151602061058d6104fb8361091a565b80838252828201915082860187848660051b89010111156105ac578586fd5b855b85811015610560578151845292840192908401906001016105ae565b8051600281106104d657600080fd5b600082601f8301126105e9578081fd5b815167ffffffffffffffff81111561060357610603610a0d565b610616601f8201601f19166020016108e9565b81815284602083860101111561062a578283fd5b61063b8260208301602087016109ac565b949350505050565b600080600080600080600080610100898b03121561065f578384fd5b883561066a81610a23565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff81111561069a578485fd5b89016080818c0312156106ab578485fd5b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060008060006101208a8c0312156106eb578081fd5b89356106f681610a23565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b600060208284031215610745578081fd5b815167ffffffffffffffff8082111561075c578283fd5b908301906101608286031215610770578283fd5b6107786108bf565b8251815260208301516020820152604083015160408201526060830151828111156107a1578485fd5b6107ad878286016105d9565b6060830152506107bf608084016105ca565b60808201526107d060a084016104cb565b60a08201526107e160c084016104cb565b60c082015260e083015160e08201526101006107fe8185016104cb565b908201526101208381015183811115610815578586fd5b610821888287016104db565b828401525050610140808401518381111561083a578586fd5b6108468882870161056d565b918301919091525095945050505050565b600082516108698184602087016109ac565b9190910192915050565b6000808335601e19843603018112610889578283fd5b83018035915067ffffffffffffffff8211156108a3578283fd5b6020019150368190038213156108b857600080fd5b9250929050565b604051610160810167ffffffffffffffff811182821017156108e3576108e3610a0d565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561091257610912610a0d565b604052919050565b600067ffffffffffffffff82111561093457610934610a0d565b5060051b60200190565b60008219821115610951576109516109f7565b500190565b60008261097157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610990576109906109f7565b500290565b6000828210156109a7576109a76109f7565b500390565b60005b838110156109c75781810151838201526020016109af565b838111156109d6576000848401525b50505050565b60006000198214156109f0576109f06109f7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610a4557600080fd5b5056fea164736f6c6343000804000a";

type HandicapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Handicap__factory extends ContractFactory {
  constructor(...args: HandicapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Handicap> {
    return super.deploy(overrides || {}) as Promise<Handicap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Handicap {
    return super.attach(address) as Handicap;
  }
  override connect(signer: Signer): Handicap__factory {
    return super.connect(signer) as Handicap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapInterface {
    return new utils.Interface(_abi) as HandicapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Handicap {
    return new Contract(address, _abi, signerOrProvider) as Handicap;
  }
}
