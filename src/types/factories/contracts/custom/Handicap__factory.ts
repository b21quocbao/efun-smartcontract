/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Handicap,
  HandicapInterface,
} from "../../../contracts/custom/Handicap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
    ],
    name: "hostFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f63806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063836883161161005b57806383688316146100ce57806394558f0a146100e1578063ccb32ac5146100f4578063dcbfcc971461010a57600080fd5b806326232a2e146100825780634f4d2e1e14610098578063812acab1146100ab575b600080fd5b60325b6040519081526020015b60405180910390f35b6100856100a6366004610a6e565b61011d565b6100be6100b9366004610c48565b610460565b604051901515815260200161008f565b6100856100dc366004610bbf565b6104fd565b6100856100ef366004610c48565b61058e565b610085610102366004610a43565b600092915050565b610085610118366004610b13565b610636565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561016257600080fd5b505afa158015610176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261019e9190810190610cda565b905082915060005b87811015610451578888828181106101ce57634e487b7160e01b600052603260045260246000fd5b90506020020135836101e09190610e7b565b9250801580156101f557508160600151600414155b8061020e575080600414801561020e5750606082015115155b15610441578015801561022357506060820151155b8061023d575080600414801561023d575081606001516004145b156102b2578487878381811061026357634e487b7160e01b600052603260045260246000fd5b905060200201358a8a8481811061028a57634e487b7160e01b600052603260045260246000fd5b9050602002013561029b9190610eb3565b6102a59190610e93565b6102af9084610ed2565b92505b801580156102c4575081606001516001145b806102de57508060041480156102de575081606001516003145b1561036a5784600288888481811061030657634e487b7160e01b600052603260045260246000fd5b90506020020135876103189190610e7b565b8b8b8581811061033857634e487b7160e01b600052603260045260246000fd5b905060200201356103499190610eb3565b6103539190610e93565b61035d9190610e93565b6103679084610ed2565b92505b8015801561037c575081606001516002145b806103965750806004148015610396575081606001516002145b156103d0578888828181106103bb57634e487b7160e01b600052603260045260246000fd5b90506020020135836103cd9190610ed2565b92505b801580156103e2575081606001516003145b806103fc57508060041480156103fc575081606001516001145b1561044157600289898381811061042357634e487b7160e01b600052603260045260246000fd5b905060200201356104349190610e93565b61043e9084610ed2565b92505b61044a81610ee9565b90506101a6565b50509998505050505050505050565b600080838561046f898d610e7b565b6104799190610e7b565b6104839190610eb3565b90506000878a8a868181106104a857634e487b7160e01b600052603260045260246000fd5b905060200201356104b99190610e7b565b905060006104c78883610eb3565b90508083101560008615806104dc5750866004145b90508180156104e85750805b955050505050509a9950505050505050505050565b60008061050a858a610e7b565b9050600084878a8a8781811061053057634e487b7160e01b600052603260045260246000fd5b905060200201356105419190610eb3565b61054b9190610e93565b905060006105598689610ed2565b905080866105678486610ed2565b6105719190610eb3565b61057b9190610e93565b93505050505b9998505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060f9190810190610cda565b90508461061c8789610eb3565b6106269190610e93565b9c9b505050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561067b57600080fd5b505afa15801561068f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106b79190810190610cda565b905060008660200135905060008260e0015182815181106106e857634e487b7160e01b600052603260045260246000fd5b602002602001015190508415610779578115801561070b57508260600151600414155b8061072457508160041480156107245750606083015115155b6107745760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b610799565b86610785828a35610eb3565b61078f9190610e93565b9350505050610581565b811580156107a957506060830151155b806107c357508160041480156107c3575082606001516004145b156107e157866107d4828a35610eb3565b6107de9190610e93565b93505b811580156107f3575082606001516001145b8061080d575081600414801561080d575082606001516003145b156108415786600261081f8383610e7b565b61082a908b35610eb3565b6108349190610e93565b61083e9190610e93565b93505b81158015610853575082606001516002145b8061086d575081600414801561086d575082606001516002145b1561087757873593505b81158015610889575082606001516003145b806108a357508160041480156108a3575082606001516001145b156108b45761057b60028935610e93565b5050509998505050505050505050565b80516108cf81610f30565b919050565b60008083601f8401126108e5578182fd5b50813567ffffffffffffffff8111156108fc578182fd5b6020830191508360208260051b850101111561091757600080fd5b9250929050565b600082601f83011261092e578081fd5b8151602067ffffffffffffffff82111561094a5761094a610f1a565b8160051b610959828201610e4a565b838152828101908684018388018501891015610973578687fd5b8693505b85841015610995578051835260019390930192918401918401610977565b50979650505050505050565b80516108cf81610f48565b8051600281106108cf57600080fd5b600082601f8301126109cb578081fd5b815167ffffffffffffffff8111156109e5576109e5610f1a565b60206109f9601f8301601f19168201610e4a565b8281528582848701011115610a0c578384fd5b835b83811015610a29578581018301518282018401528201610a0e565b83811115610a3957848385840101525b5095945050505050565b60008060408385031215610a55578182fd5b8235610a6081610f30565b946020939093013593505050565b600080600080600080600080600060e08a8c031215610a8b578485fd5b8935610a9681610f30565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610ac0578687fd5b610acc8d838e016108d4565b909850965060808c0135915080821115610ae4578586fd5b50610af18c828d016108d4565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000898b03610140811215610b32578586fd5b8a35610b3d81610f30565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610b66578687fd5b610b728d828e016108d4565b9098509650506060607f1982011215610b89578485fd5b5060808a01935060e08a013592506101008a013591506101208a0135610bae81610f48565b809150509295985092959850929598565b60008060008060008060008060006101008a8c031215610bdd578485fd5b8935610be881610f30565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610c11578586fd5b610c1d8c828d016108d4565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610c67578384fd5b8a35610c7281610f30565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610c9b578485fd5b610ca78d828e016108d4565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610ceb578081fd5b815167ffffffffffffffff80821115610d02578283fd5b908301906101e08286031215610d16578283fd5b610d1e610e20565b82518152602083015160208201526040830151604082015260608301516060820152610d4c608084016109ac565b6080820152610d5d60a084016108c4565b60a0820152610d6e60c084016108c4565b60c082015260e083015182811115610d84578485fd5b610d908782860161091e565b60e0830152506101008084015183811115610da9578586fd5b610db5888287016109bb565b828401525050610120915081830151828201526101409150610dd88284016109a1565b91810191909152610160828101519082015261018080830151908201526101a090610e048284016109a1565b918101919091526101c091820151918101919091529392505050565b6040516101e0810167ffffffffffffffff81118282101715610e4457610e44610f1a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e7357610e73610f1a565b604052919050565b60008219821115610e8e57610e8e610f04565b500190565b600082610eae57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610ecd57610ecd610f04565b500290565b600082821015610ee457610ee4610f04565b500390565b6000600019821415610efd57610efd610f04565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f4557600080fd5b50565b8015158114610f4557600080fdfea164736f6c6343000804000a";

type HandicapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Handicap__factory extends ContractFactory {
  constructor(...args: HandicapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Handicap> {
    return super.deploy(overrides || {}) as Promise<Handicap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Handicap {
    return super.attach(address) as Handicap;
  }
  override connect(signer: Signer): Handicap__factory {
    return super.connect(signer) as Handicap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapInterface {
    return new utils.Interface(_abi) as HandicapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Handicap {
    return new Contract(address, _abi, signerOrProvider) as Handicap;
  }
}
