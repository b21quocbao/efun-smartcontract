/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Handicap,
  HandicapInterface,
} from "../../../contracts/custom/Handicap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ab2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dc5e10981461003b578063fa29edd914610068575b600080fd5b61004e610049366004610671565b61008b565b604080519283526020830191909152015b60405180910390f35b61007b6100763660046106fb565b610319565b604051901515815260200161005f565b60008060008a73ffffffffffffffffffffffffffffffffffffffff16632e3405998b6040518263ffffffff1660e01b81526004016100cb91815260200190565b60006040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011f9190810190610762565b9050600061017682610160015189806040019061013c91906108d0565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061043c92505050565b905080158015610187575084600414155b8061019c575080600414801561019c57508415155b6101ec5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b801580156101f8575084155b8061020e575080600114801561020e5750846004145b1561022c578561021f888a356109d3565b61022991906109b3565b93505b8015801561023a5750846001145b8061025057508060011480156102505750846003145b1561028457856002610262898361099b565b61026d908b356109d3565b61027791906109b3565b61028191906109b3565b93505b801580156102925750846002145b806102a857508060011480156102a85750846002145b156102b257873593505b801580156102c05750846003145b806102d657508060011480156102d65750846001145b156102ea576102e7600289356109b3565b93505b6101208201518a906102fe908a35906109d3565b61030891906109b3565b925050509850989650505050505050565b6000808385610328898c61099b565b610332919061099b565b61033c91906109d3565b9050600061034a888a61099b565b905060006103588a8c6109f2565b9050600061036689846109d3565b905060006002610376898c61099b565b61038090866109d3565b61038a91906109b3565b905060006103996002866109b3565b9050600060026103a98b8e61099b565b6103b390876109d3565b6103bd91906109b3565b905060006103cc6002876109b3565b90508488101560006103de838761099b565b8a1015905060006103ef868661099b565b8b1015905060008d158061040357508d6004145b905083801561040f5750825b80156104185750815b80156104215750805b9c505050505050505050505050509998505050505050505050565b6000805b83518110156104985761047a84828151811061046c57634e487b7160e01b600052603260045260246000fd5b6020026020010151846104a0565b1561048657905061049a565b8061049081610a39565b915050610440565b505b92915050565b6000816040516020016104b391906108b4565b60405160208183030381529060405280519060200120836040516020016104da91906108b4565b6040516020818303038152906040528051906020012014905092915050565b805161050481610a80565b919050565b600082601f830112610519578081fd5b8151602061052e61052983610977565b610946565b80838252828201915082860187848660051b890101111561054d578586fd5b855b8581101561058e57815167ffffffffffffffff81111561056d578788fd5b61057b8a87838c0101610607565b855250928401929084019060010161054f565b5090979650505050505050565b600082601f8301126105ab578081fd5b815160206105bb61052983610977565b80838252828201915082860187848660051b89010111156105da578586fd5b855b8581101561058e578151845292840192908401906001016105dc565b80516002811061050457600080fd5b600082601f830112610617578081fd5b815167ffffffffffffffff81111561063157610631610a6a565b610644601f8201601f1916602001610946565b818152846020838601011115610658578283fd5b610669826020830160208701610a09565b949350505050565b600080600080600080600080610100898b03121561068d578384fd5b883561069881610a80565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff8111156106c8578485fd5b89016080818c0312156106d9578485fd5b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060008060006101208a8c031215610719578081fd5b893561072481610a80565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b600060208284031215610773578081fd5b815167ffffffffffffffff8082111561078a578283fd5b908301906101a0828603121561079e578283fd5b6107a661091c565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156107d9578485fd5b6107e587828601610607565b6080830152506107f760a084016105f8565b60a082015261080860c084016104f9565b60c082015260e08301518281111561081e578485fd5b61082a87828601610607565b60e08301525061010061083e8185016104f9565b90820152610120838101519082015261014061085b8185016104f9565b908201526101608381015183811115610872578586fd5b61087e88828701610509565b8284015250506101808084015183811115610897578586fd5b6108a38882870161059b565b918301919091525095945050505050565b600082516108c6818460208701610a09565b9190910192915050565b6000808335601e198436030181126108e6578283fd5b83018035915067ffffffffffffffff821115610900578283fd5b60200191503681900382131561091557600080fd5b9250929050565b6040516101a0810167ffffffffffffffff8111828210171561094057610940610a6a565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561096f5761096f610a6a565b604052919050565b600067ffffffffffffffff82111561099157610991610a6a565b5060051b60200190565b600082198211156109ae576109ae610a54565b500190565b6000826109ce57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156109ed576109ed610a54565b500290565b600082821015610a0457610a04610a54565b500390565b60005b83811015610a24578181015183820152602001610a0c565b83811115610a33576000848401525b50505050565b6000600019821415610a4d57610a4d610a54565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610aa257600080fd5b5056fea164736f6c6343000804000a";

type HandicapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Handicap__factory extends ContractFactory {
  constructor(...args: HandicapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Handicap> {
    return super.deploy(overrides || {}) as Promise<Handicap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Handicap {
    return super.attach(address) as Handicap;
  }
  override connect(signer: Signer): Handicap__factory {
    return super.connect(signer) as Handicap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapInterface {
    return new utils.Interface(_abi) as HandicapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Handicap {
    return new Contract(address, _abi, signerOrProvider) as Handicap;
  }
}
