/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Handicap,
  HandicapInterface,
} from "../../../contracts/custom/Handicap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636341acbc1461003b578063812acab114610061575b600080fd5b61004e610049366004610617565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046106c0565b6102c3565b6040519015158152602001610058565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101129190810190610752565b905060208701358015801561012c57508160600151600414155b8061014557508060041480156101455750606082015115155b6101955760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b801580156101a557506060820151155b806101bf57508060011480156101bf575081606001516004145b156101dd57856101d0888a3561091a565b6101da91906108fa565b92505b801580156101ef575081606001516001145b806102095750806001148015610209575081606001516003145b1561023d5785600261021b89836108e2565b610226908b3561091a565b61023091906108fa565b61023a91906108fa565b92505b8015801561024f575081606001516002145b806102695750806001148015610269575081606001516002145b1561027357873592505b80158015610285575081606001516003145b8061029f575080600114801561029f575081606001516001145b156102b3576102b0600289356108fa565b92505b50509a9950505050505050505050565b60008083856102d2898d6108e2565b6102dc91906108e2565b6102e6919061091a565b90506000878a8a8681811061030b57634e487b7160e01b600052603260045260246000fd5b9050602002013561031c91906108e2565b905060008a8a8681811061034057634e487b7160e01b600052603260045260246000fd5b905060200201358c6103529190610939565b90506000610360898461091a565b905060006002610370898c6108e2565b61037a908661091a565b61038491906108fa565b905060006103936002866108fa565b9050600060026103a38b8e6108e2565b6103ad908761091a565b6103b791906108fa565b905060006103c66002876108fa565b90508488101560006103d883876108e2565b8a1015905060006103e986866108e2565b8b1015905060008d15806103fd57508d6004145b90508380156104095750825b80156104125750815b801561041b5750805b9c505050505050505050505050509a9950505050505050505050565b80516104428161097c565b919050565b600082601f830112610457578081fd5b8151602061046c610467836108be565b61088d565b80838252828201915082860187848660051b890101111561048b578586fd5b855b858110156104cc57815167ffffffffffffffff8111156104ab578788fd5b6104b98a87838c010161058f565b855250928401929084019060010161048d565b5090979650505050505050565b60008083601f8401126104ea578182fd5b50813567ffffffffffffffff811115610501578182fd5b6020830191508360208260051b850101111561051c57600080fd5b9250929050565b600082601f830112610533578081fd5b81516020610543610467836108be565b80838252828201915082860187848660051b8901011115610562578586fd5b855b858110156104cc57815184529284019290840190600101610564565b80516002811061044257600080fd5b600082601f83011261059f578081fd5b815167ffffffffffffffff8111156105b9576105b9610966565b60206105cd601f8301601f1916820161088d565b82815285828487010111156105e0578384fd5b835b838110156105fd5785810183015182820184015282016105e2565b8381111561060d57848385840101525b5095945050505050565b6000806000806000806000806000808a8c03610160811215610637578687fd5b8b356106428161097c565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff81111561066b578788fd5b6106778e828f016104d9565b9099509750506060607f198201121561068e578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b6000806000806000806000806000806101208b8d0312156106df578586fd5b8a356106ea8161097c565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610713578687fd5b61071f8d828e016104d9565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610763578081fd5b815167ffffffffffffffff8082111561077a578283fd5b90830190610140828603121561078e578283fd5b610796610863565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156107c9578485fd5b6107d58782860161058f565b6080830152506107e760a08401610580565b60a08201526107f860c08401610437565b60c082015261080960e08401610437565b60e08201526101008084015183811115610821578586fd5b61082d88828701610447565b8284015250506101208084015183811115610846578586fd5b61085288828701610523565b918301919091525095945050505050565b604051610140810167ffffffffffffffff8111828210171561088757610887610966565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156108b6576108b6610966565b604052919050565b600067ffffffffffffffff8211156108d8576108d8610966565b5060051b60200190565b600082198211156108f5576108f5610950565b500190565b60008261091557634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561093457610934610950565b500290565b60008282101561094b5761094b610950565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461099e57600080fd5b5056fea164736f6c6343000804000a";

type HandicapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Handicap__factory extends ContractFactory {
  constructor(...args: HandicapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Handicap> {
    return super.deploy(overrides || {}) as Promise<Handicap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Handicap {
    return super.attach(address) as Handicap;
  }
  override connect(signer: Signer): Handicap__factory {
    return super.connect(signer) as Handicap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapInterface {
    return new utils.Interface(_abi) as HandicapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Handicap {
    return new Contract(address, _abi, signerOrProvider) as Handicap;
  }
}
