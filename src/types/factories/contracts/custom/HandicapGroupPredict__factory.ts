/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandicapGroupPredict,
  HandicapGroupPredictInterface,
} from "../../../contracts/custom/HandicapGroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRewardSponsor",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateSponsor",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f6f806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063836883161161005b57806383688316146100e95780638d1d6ea6146100fc57806394558f0a1461010f578063dcbfcc971461012257600080fd5b80634f4d2e1e1461008257806358dcf240146100a8578063812acab1146100bb575b600080fd5b610095610090366004610a34565b610135565b6040519081526020015b60405180910390f35b6100956100b6366004610ad9565b610291565b6100d96100c9366004610c93565b60019a9950505050505050505050565b604051901515815260200161009f565b6100956100f7366004610c0a565b6103dd565b61009561010a366004610c93565b6103ed565b61009561011d366004610c93565b610444565b610095610130366004610b67565b610498565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561017a57600080fd5b505afa15801561018e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b69190810190610d25565b905060008160600151600014806101d1575081606001516001145b80156102045750888860008181106101f957634e487b7160e01b600052603260045260246000fd5b905060200201356000145b9050600082606001516004148061021f575082606001516003145b801561025257508989600481811061024757634e487b7160e01b600052603260045260246000fd5b905060200201356000145b606084015190915060021482806102665750815b8061026e5750805b1561027b57859450610280565b600094505b505050509998505050505050505050565b604051632e34059960e01b81526004810188905260009081906001600160a01b038b1690632e3405999060240160006040518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103129190810190610d25565b905060008560200135905060008260e00151828151811061034357634e487b7160e01b600052603260045260246000fd5b602002602001015190508888846060015181811061037157634e487b7160e01b600052603260045260246000fd5b905060200201356000141561038c57600093505050506103d1565b8888838181106103ac57634e487b7160e01b600052603260045260246000fd5b602002919091013590506103c1883587610ef1565b6103cb9190610ed1565b93505050505b98975050505050505050565b60005b9998505050505050505050565b60008588888581811061041057634e487b7160e01b600052603260045260246000fd5b905060200201356104219190610eb9565b61042b8784610ef1565b6104359190610ed1565b9b9a5050505050505050505050565b60008588888581811061046757634e487b7160e01b600052603260045260246000fd5b905060200201356104789190610eb9565b8680610484858d610eb9565b61048e9190610eb9565b61042b9190610ef1565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105199190810190610d25565b905060008660200135905060008260e00151828151811061054a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905082606001516004148061056b575082606001516003145b156105ad578989600481811061059157634e487b7160e01b600052603260045260246000fd5b90506020020135600014156105ad575050853591506103e09050565b606083015115806105c2575082606001516001145b1561060457898960008181106105e857634e487b7160e01b600052603260045260246000fd5b9050602002013560001415610604575050853591506103e09050565b841561068b578115801561061d57508260600151600414155b8061063657508160041480156106365750606083015115155b6106865760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b6106df565b8989838181106106ab57634e487b7160e01b600052603260045260246000fd5b6020029190910135905088356106c1888e610eb9565b6106cb9190610ef1565b6106d59190610ed1565b93505050506103e0565b811580156106ef57506060830151155b806107095750816004148015610709575082606001516004145b1561075b5789898381811061072e57634e487b7160e01b600052603260045260246000fd5b602002919091013590508835610744888e610eb9565b61074e9190610ef1565b6107589190610ed1565b93505b8115801561076d575082606001516001145b806107875750816004148015610787575082606001516003145b15610818578989838181106107ac57634e487b7160e01b600052603260045260246000fd5b9050602002013588600001358760028e8e8e888181106107dc57634e487b7160e01b600052603260045260246000fd5b905060200201356107ed9190610eb9565b6107f79190610ed1565b6108019190610eb9565b61080b9190610ef1565b6108159190610ed1565b93505b8115801561082a575082606001516002145b806108445750816004148015610844575082606001516002145b1561084e57873593505b81158015610860575082606001516003145b8061087a575081600414801561087a575082606001516001145b1561088e5761088b60028935610ed1565b93505b5050509998505050505050505050565b80516108a981610f3c565b919050565b60008083601f8401126108bf578182fd5b50813567ffffffffffffffff8111156108d6578182fd5b6020830191508360208260051b85010111156108f157600080fd5b9250929050565b600082601f830112610908578081fd5b8151602067ffffffffffffffff82111561092457610924610f26565b8160051b610933828201610e88565b83815282810190868401838801850189101561094d578687fd5b8693505b8584101561096f578051835260019390930192918401918401610951565b50979650505050505050565b80516108a981610f54565b8051600281106108a957600080fd5b600082601f8301126109a5578081fd5b815167ffffffffffffffff8111156109bf576109bf610f26565b60206109d3601f8301601f19168201610e88565b82815285828487010111156109e6578384fd5b835b83811015610a035785810183015182820184015282016109e8565b83811115610a1357848385840101525b5095945050505050565b600060608284031215610a2e578081fd5b50919050565b600080600080600080600080600060e08a8c031215610a51578485fd5b8935610a5c81610f3c565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610a86578687fd5b610a928d838e016108ae565b909850965060808c0135915080821115610aaa578586fd5b50610ab78c828d016108ae565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b600080600080600080600080610120898b031215610af5578384fd5b8835610b0081610f3c565b97506020890135965060408901359550606089013567ffffffffffffffff811115610b29578485fd5b610b358b828c016108ae565b9096509450610b4990508a60808b01610a1d565b925060e0890135915061010089013590509295985092959890939650565b60008060008060008060008060006101408a8c031215610b85578485fd5b8935610b9081610f3c565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610bb9578586fd5b610bc58c828d016108ae565b9097509550610bd990508b60808c01610a1d565b935060e08a013592506101008a013591506101208a0135610bf981610f54565b809150509295985092959850929598565b60008060008060008060008060006101008a8c031215610c28578283fd5b8935610c3381610f3c565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610c5c578384fd5b610c688c828d016108ae565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610cb2578384fd5b8a35610cbd81610f3c565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610ce6578485fd5b610cf28d828e016108ae565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610d36578081fd5b815167ffffffffffffffff80821115610d4d578283fd5b908301906101c08286031215610d61578283fd5b610d69610e5e565b82518152602083015160208201526040830151604082015260608301516060820152610d9760808401610986565b6080820152610da860a0840161089e565b60a0820152610db960c0840161089e565b60c082015260e083015182811115610dcf578485fd5b610ddb878286016108f8565b60e0830152506101008084015183811115610df4578586fd5b610e0088828701610995565b828401525050610120915081830151828201526101409150610e2382840161097b565b91810191909152610160828101519082015261018080830151908201526101a090610e4f82840161097b565b91810191909152949350505050565b6040516101c0810167ffffffffffffffff81118282101715610e8257610e82610f26565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610eb157610eb1610f26565b604052919050565b60008219821115610ecc57610ecc610f10565b500190565b600082610eec57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610f0b57610f0b610f10565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f5157600080fd5b50565b8015158114610f5157600080fdfea164736f6c6343000804000a";

type HandicapGroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapGroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HandicapGroupPredict__factory extends ContractFactory {
  constructor(...args: HandicapGroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HandicapGroupPredict> {
    return super.deploy(overrides || {}) as Promise<HandicapGroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandicapGroupPredict {
    return super.attach(address) as HandicapGroupPredict;
  }
  override connect(signer: Signer): HandicapGroupPredict__factory {
    return super.connect(signer) as HandicapGroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapGroupPredictInterface {
    return new utils.Interface(_abi) as HandicapGroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandicapGroupPredict {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as HandicapGroupPredict;
  }
}
