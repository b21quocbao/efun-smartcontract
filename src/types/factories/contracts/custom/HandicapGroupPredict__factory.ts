/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandicapGroupPredict,
  HandicapGroupPredictInterface,
} from "../../../contracts/custom/HandicapGroupPredict";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRewardSponsor",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateSponsor",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ed4806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063812acab11161005b578063812acab1146100ce57806383688316146100fc5780638d1d6ea61461011957806394558f0a1461012c57600080fd5b8063061bf2dc146100825780634f4d2e1e146100a8578063693d113b146100bb575b600080fd5b610095610090366004610b00565b61013f565b6040519081526020015b60405180910390f35b6100956100b63660046109b8565b610510565b6100956100c9366004610a5d565b6106bf565b6100ec6100dc366004610c46565b60019a9950505050505050505050565b604051901515815260200161009f565b61009561010a366004610bbd565b60009998505050505050505050565b610095610127366004610c46565b610791565b61009561013a366004610c46565b6107d9565b604051632e34059960e01b8152600481018b905260009081906001600160a01b038e1690632e3405999060240160006040518083038186803b15801561018457600080fd5b505afa158015610198573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c09190810190610cd8565b6060810151909150602089013590600414806101e0575081606001516003145b15610220578a8a600481811061020657634e487b7160e01b600052603260045260246000fd5b905060200201356000141561022057505086359050610501565b60608201511580610235575081606001516001145b15610275578a8a600081811061025b57634e487b7160e01b600052603260045260246000fd5b905060200201356000141561027557505086359050610501565b83156102fc578015801561028e57508160600151600414155b806102a757508060041480156102a75750606082015115155b6102f75760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b61034f565b8a8a8781811061031c57634e487b7160e01b600052603260045260246000fd5b602002919091013590508935610332878f610e2c565b61033c9190610e64565b6103469190610e44565b92505050610501565b8015801561035f57506060820151155b806103795750806004148015610379575081606001516004145b156103cb578a8a8781811061039e57634e487b7160e01b600052603260045260246000fd5b6020029190910135905089356103b4878f610e2c565b6103be9190610e64565b6103c89190610e44565b92505b801580156103dd575081606001516001145b806103f757508060041480156103f7575081606001516003145b15610488578a8a8781811061041c57634e487b7160e01b600052603260045260246000fd5b9050602002013589600001358660028f8f8f8c81811061044c57634e487b7160e01b600052603260045260246000fd5b9050602002013561045d9190610e2c565b6104679190610e44565b6104719190610e2c565b61047b9190610e64565b6104859190610e44565b92505b8015801561049a575081606001516002145b806104b457508060041480156104b4575081606001516002145b156104be57883592505b801580156104d0575081606001516003145b806104ea57508060041480156104ea575081606001516001145b156104fe576104fb60028a35610e44565b92505b50505b9b9a5050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561055557600080fd5b505afa158015610569573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105919190810190610cd8565b905060004282604001516202a3006105a99190610e2c565b111580156105db57506001826080015160018111156105d857634e487b7160e01b600052602160045260246000fd5b14155b905060008260600151600014806105f6575082606001516001145b801561062957508989600081811061061e57634e487b7160e01b600052603260045260246000fd5b905060200201356000145b90506000836060015160041480610644575083606001516003145b801561067757508a8a600481811061066c57634e487b7160e01b600052603260045260246000fd5b905060200201356000145b6060850151909150600214828061068b5750815b806106935750805b8061069b5750835b156106a8578695506106ad565b600095505b50505050509998505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561070457600080fd5b505afa158015610718573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107409190810190610cd8565b905088888581811061076257634e487b7160e01b600052603260045260246000fd5b60200291909101359050610777883585610e64565b6107819190610e44565b9c9b505050505050505050505050565b6000858888858181106107b457634e487b7160e01b600052603260045260246000fd5b905060200201356107c59190610e2c565b6107cf8784610e64565b6105019190610e44565b6000858888858181106107fc57634e487b7160e01b600052603260045260246000fd5b9050602002013561080d9190610e2c565b8680610819858d610e2c565b6108239190610e2c565b6107cf9190610e64565b805161083881610eaf565b919050565b60008083601f84011261084e578182fd5b50813567ffffffffffffffff811115610865578182fd5b6020830191508360208260051b850101111561088057600080fd5b9250929050565b600082601f830112610897578081fd5b8151602067ffffffffffffffff8211156108b3576108b3610e99565b8160051b6108c2828201610dfb565b8381528281019086840183880185018910156108dc578687fd5b8693505b858410156108fe5780518352600193909301929184019184016108e0565b50979650505050505050565b80516002811061083857600080fd5b600082601f830112610929578081fd5b815167ffffffffffffffff81111561094357610943610e99565b6020610957601f8301601f19168201610dfb565b828152858284870101111561096a578384fd5b835b8381101561098757858101830151828201840152820161096c565b8381111561099757848385840101525b5095945050505050565b6000606082840312156109b2578081fd5b50919050565b600080600080600080600080600060e08a8c0312156109d5578485fd5b89356109e081610eaf565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610a0a578687fd5b610a168d838e0161083d565b909850965060808c0135915080821115610a2e578586fd5b50610a3b8c828d0161083d565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000806101608b8d031215610a7c578081fd5b8a35610a8781610eaf565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610ab0578182fd5b610abc8d828e0161083d565b9098509650610ad090508c60808d016109a1565b945060e08b013593506101008b013592506101208b013591506101408b013590509295989b9194979a5092959850565b60008060008060008060008060008060006101808c8e031215610b21578081fd5b8b35610b2c81610eaf565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610b55578182fd5b610b618e828f0161083d565b9099509750610b7590508d60808e016109a1565b955060e08c013594506101008c013593506101208c013592506101408c013591506101608c01358015158114610ba9578182fd5b809150509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610bdb578283fd5b8935610be681610eaf565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610c0f578384fd5b610c1b8c828d0161083d565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610c65578384fd5b8a35610c7081610eaf565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610c99578485fd5b610ca58d828e0161083d565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610ce9578081fd5b815167ffffffffffffffff80821115610d00578283fd5b908301906101408286031215610d14578283fd5b610d1c610dd1565b82518152602083015160208201526040830151604082015260608301516060820152610d4a6080840161090a565b6080820152610d5b60a0840161082d565b60a0820152610d6c60c0840161082d565b60c082015260e083015182811115610d82578485fd5b610d8e87828601610887565b60e0830152506101008084015183811115610da7578586fd5b610db388828701610919565b91830191909152506101209283015192810192909252509392505050565b604051610140810167ffffffffffffffff81118282101715610df557610df5610e99565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e2457610e24610e99565b604052919050565b60008219821115610e3f57610e3f610e83565b500190565b600082610e5f57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610e7e57610e7e610e83565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ec457600080fd5b5056fea164736f6c6343000804000a";

type HandicapGroupPredictConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandicapGroupPredictConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HandicapGroupPredict__factory extends ContractFactory {
  constructor(...args: HandicapGroupPredictConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HandicapGroupPredict> {
    return super.deploy(overrides || {}) as Promise<HandicapGroupPredict>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandicapGroupPredict {
    return super.attach(address) as HandicapGroupPredict;
  }
  override connect(signer: Signer): HandicapGroupPredict__factory {
    return super.connect(signer) as HandicapGroupPredict__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandicapGroupPredictInterface {
    return new utils.Interface(_abi) as HandicapGroupPredictInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandicapGroupPredict {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as HandicapGroupPredict;
  }
}
