/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Reward,
  RewardInterface,
} from "../../../../../contracts/custom/group-predict/Helper.sol/Reward";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictOptionStats",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPredict",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "predictOptions",
            type: "string",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sponsorReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ab806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dac29ad014610030575b600080fd5b61004361003e3660046102d7565b61005c565b6040805192835260208301919091520160405180910390f35b60008060008773ffffffffffffffffffffffffffffffffffffffff16632e340599886040518263ffffffff1660e01b815260040161009c91815260200190565b60006040518083038186803b1580156100b457600080fd5b505afa1580156100c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100f09190810190610348565b6080810151909150610143816101096040880188610472565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101d992505050565b6101935760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8561019f863589610508565b6101a991906104e8565b93508585600001358361012001516101c19190610508565b6101cb91906104e8565b925050509550959350505050565b6000816040516020016101ec9190610456565b60405160208183030381529060405280519060200120836040516020016102139190610456565b6040516020818303038152906040528051906020012014905092915050565b805161023d81610579565b919050565b80516002811061023d57600080fd5b600082601f830112610261578081fd5b815167ffffffffffffffff8082111561027c5761027c610563565b604051601f8301601f19908116603f011681019082821181831017156102a4576102a4610563565b816040528381528660208588010111156102bc578485fd5b6102cd846020830160208901610533565b9695505050505050565b600080600080600060a086880312156102ee578081fd5b85356102f981610579565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610329578182fd5b86016080818903121561033a578182fd5b809150509295509295909350565b600060208284031215610359578081fd5b815167ffffffffffffffff80821115610370578283fd5b908301906101608286031215610384578283fd5b61038c6104be565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156103bf578485fd5b6103cb87828601610251565b6080830152506103dd60a08401610242565b60a08201526103ee60c08401610232565b60c082015260e083015182811115610404578485fd5b61041087828601610251565b60e0830152506101009150610426828401610232565b82820152610120915081830151828201526101409150610447828401610232565b91810191909152949350505050565b60008251610468818460208701610533565b9190910192915050565b6000808335601e19843603018112610488578283fd5b83018035915067ffffffffffffffff8211156104a2578283fd5b6020019150368190038213156104b757600080fd5b9250929050565b604051610160810167ffffffffffffffff811182821017156104e2576104e2610563565b60405290565b60008261050357634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561052e57634e487b7160e01b81526011600452602481fd5b500290565b60005b8381101561054e578181015183820152602001610536565b8381111561055d576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461059b57600080fd5b5056fea164736f6c6343000804000a";

type RewardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reward__factory extends ContractFactory {
  constructor(...args: RewardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Reward> {
    return super.deploy(overrides || {}) as Promise<Reward>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Reward {
    return super.attach(address) as Reward;
  }
  override connect(signer: Signer): Reward__factory {
    return super.connect(signer) as Reward__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardInterface {
    return new utils.Interface(_abi) as RewardInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Reward {
    return new Contract(address, _abi, signerOrProvider) as Reward;
  }
}
