/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    name: "getAmountHasFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
    ],
    name: "hostFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610edf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806394558f0a1161005b57806394558f0a146100ec5780639f5c36f0146100ff578063ccb32ac514610111578063dcbfcc971461012757600080fd5b806326232a2e1461008d5780634f4d2e1e146100a3578063812acab1146100b657806383688316146100d9575b600080fd5b60325b6040519081526020015b60405180910390f35b6100906100b13660046109ab565b61013a565b6100c96100c4366004610b85565b6102e1565b604051901515815260200161009a565b6100906100e7366004610afc565b610454565b6100906100fa366004610b85565b6105de565b61009061010d366004610d5d565b5090565b61009061011f366004610980565b600092915050565b610090610135366004610a50565b610686565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561017f57600080fd5b505afa158015610193573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101bb9190810190610c17565b905082915060005b878110156102d25760006101d8600283610e56565b1580156101e9575082606001518210155b905060006101f8600284610e56565b600114801561020b575083606001518311155b90508a8a8481811061022d57634e487b7160e01b600052603260045260246000fd5b905060200201358561023f9190610dd9565b9450818061024a5750805b156102bf578689898581811061027057634e487b7160e01b600052603260045260246000fd5b905060200201358c8c8681811061029757634e487b7160e01b600052603260045260246000fd5b905060200201356102a89190610e05565b6102b29190610df1565b6102bc9086610e24565b94505b5050806102cb90610e3b565b90506101c3565b50509998505050505050505050565b6000806102ef600284610e56565b61035c578888610300856001610dd9565b81811061031d57634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061034457634e487b7160e01b600052603260045260246000fd5b905060200201356103559190610dd9565b90506103c1565b8888610369600186610e24565b81811061038657634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106103ad57634e487b7160e01b600052603260045260246000fd5b905060200201356103be9190610dd9565b90505b6000886103cf876002610e05565b6103d99190610df1565b9050600085826103e98b86610dd9565b6103f39190610dd9565b6103fd9190610e05565b90506000888a8d8d8981811061042357634e487b7160e01b600052603260045260246000fd5b905060200201356104349190610dd9565b61043e9190610e05565b909110159e9d5050505050505050505050505050565b600080610462600284610e56565b6104cf578787610473856001610dd9565b81811061049057634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106104b757634e487b7160e01b600052603260045260246000fd5b905060200201356104c89190610dd9565b9050610534565b87876104dc600186610e24565b8181106104f957634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061052057634e487b7160e01b600052603260045260246000fd5b905060200201356105319190610dd9565b90505b600087610542876002610e05565b61054c9190610df1565b9050600061055a8284610dd9565b9050600086898c8c8981811061058057634e487b7160e01b600052603260045260246000fd5b905060200201356105919190610e05565b61059b9190610df1565b905060006105a9888b610e24565b905080886105b78486610e24565b6105c19190610e05565b6105cb9190610df1565b9f9e505050505050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261065f9190810190610c17565b90508461066c8789610e05565b6106769190610df1565b9c9b505050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107079190810190610c17565b905060008660200135905060008260e00151828151811061073857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600289602001356107559190610e56565b15801561076a57508360600151896020013510155b9050600061077d600260208c0135610e56565b6001148015610794575084606001518a6020013511155b905086156107f55781806107a55750805b6107f55760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b886105c1848c35610e05565b805161080c81610eac565b919050565b60008083601f840112610822578182fd5b50813567ffffffffffffffff811115610839578182fd5b6020830191508360208260051b850101111561085457600080fd5b9250929050565b600082601f83011261086b578081fd5b8151602067ffffffffffffffff82111561088757610887610e96565b8160051b610896828201610da8565b8381528281019086840183880185018910156108b0578687fd5b8693505b858410156108d25780518352600193909301929184019184016108b4565b50979650505050505050565b805161080c81610ec4565b80516003811061080c57600080fd5b600082601f830112610908578081fd5b815167ffffffffffffffff81111561092257610922610e96565b6020610936601f8301601f19168201610da8565b8281528582848701011115610949578384fd5b835b8381101561096657858101830151828201840152820161094b565b8381111561097657848385840101525b5095945050505050565b60008060408385031215610992578182fd5b823561099d81610eac565b946020939093013593505050565b600080600080600080600080600060e08a8c0312156109c8578485fd5b89356109d381610eac565b985060208a0135975060408a0135965060608a013567ffffffffffffffff808211156109fd578687fd5b610a098d838e01610811565b909850965060808c0135915080821115610a21578586fd5b50610a2e8c828d01610811565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000898b03610140811215610a6f578586fd5b8a35610a7a81610eac565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610aa3578687fd5b610aaf8d828e01610811565b9098509650506060607f1982011215610ac6578485fd5b5060808a01935060e08a013592506101008a013591506101208a0135610aeb81610ec4565b809150509295985092959850929598565b60008060008060008060008060006101008a8c031215610b1a578485fd5b8935610b2581610eac565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610b4e578586fd5b610b5a8c828d01610811565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610ba4578384fd5b8a35610baf81610eac565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610bd8578485fd5b610be48d828e01610811565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610c28578081fd5b815167ffffffffffffffff80821115610c3f578283fd5b908301906101e08286031215610c53578283fd5b610c5b610d7e565b82518152602083015160208201526040830151604082015260608301516060820152610c89608084016108e9565b6080820152610c9a60a08401610801565b60a0820152610cab60c08401610801565b60c082015260e083015182811115610cc1578485fd5b610ccd8782860161085b565b60e0830152506101008084015183811115610ce6578586fd5b610cf2888287016108f8565b828401525050610120915081830151828201526101409150610d158284016108de565b91810191909152610160828101519082015261018080830151908201526101a090610d418284016108de565b918101919091526101c091820151918101919091529392505050565b60008060408385031215610d6f578182fd5b50508035926020909101359150565b6040516101e0810167ffffffffffffffff81118282101715610da257610da2610e96565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dd157610dd1610e96565b604052919050565b60008219821115610dec57610dec610e6a565b500190565b600082610e0057610e00610e80565b500490565b6000816000190483118215151615610e1f57610e1f610e6a565b500290565b600082821015610e3657610e36610e6a565b500390565b6000600019821415610e4f57610e4f610e6a565b5060010190565b600082610e6557610e65610e80565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ec157600080fd5b50565b8015158114610ec157600080fdfea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
