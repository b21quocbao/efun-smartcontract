/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b20806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636341acbc14610046578063812acab11461006c578063836883161461008f575b600080fd5b6100596100543660046106e2565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a366004610814565b610205565b6040519015158152602001610063565b61005961009d36600461078b565b610378565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261013091908101906108a6565b90506000610143600260208a0135610a98565b15801561015857508160600151886020013510155b9050600061016b600260208b0135610a98565b600114801561018257508260600151896020013511155b9050818061018d5750805b6101dd5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b866101e9898b35610a62565b6101f39190610a4e565b9e9d5050505050505050505050505050565b600080610213600284610a98565b610280578888610224856001610a36565b81811061024157634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061026857634e487b7160e01b600052603260045260246000fd5b905060200201356102799190610a36565b90506102e5565b888861028d600186610a81565b8181106102aa57634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106102d157634e487b7160e01b600052603260045260246000fd5b905060200201356102e29190610a36565b90505b6000886102f3876002610a62565b6102fd9190610a4e565b90506000858261030d8b86610a36565b6103179190610a36565b6103219190610a62565b90506000888a8d8d8981811061034757634e487b7160e01b600052603260045260246000fd5b905060200201356103589190610a36565b6103629190610a62565b909110159e9d5050505050505050505050505050565b600080610386600284610a98565b6103f3578787610397856001610a36565b8181106103b457634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106103db57634e487b7160e01b600052603260045260246000fd5b905060200201356103ec9190610a36565b9050610458565b8787610400600186610a81565b81811061041d57634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061044457634e487b7160e01b600052603260045260246000fd5b905060200201356104559190610a36565b90505b600087610466876002610a62565b6104709190610a4e565b905060008561047f8385610a36565b6104899190610a62565b90506000888b8b888181106104ae57634e487b7160e01b600052603260045260246000fd5b905060200201356104bf9190610a62565b905060006104cd888b610a81565b905087816104db8486610a81565b6104e59190610a4e565b6104ef9190610a62565b9f9e505050505050505050505050505050565b805161050d81610aee565b919050565b600082601f830112610522578081fd5b8151602061053761053283610a12565b6109e1565b80838252828201915082860187848660051b8901011115610556578586fd5b855b8581101561059757815167ffffffffffffffff811115610576578788fd5b6105848a87838c010161065a565b8552509284019290840190600101610558565b5090979650505050505050565b60008083601f8401126105b5578182fd5b50813567ffffffffffffffff8111156105cc578182fd5b6020830191508360208260051b85010111156105e757600080fd5b9250929050565b600082601f8301126105fe578081fd5b8151602061060e61053283610a12565b80838252828201915082860187848660051b890101111561062d578586fd5b855b858110156105975781518452928401929084019060010161062f565b80516002811061050d57600080fd5b600082601f83011261066a578081fd5b815167ffffffffffffffff81111561068457610684610ad8565b6020610698601f8301601f191682016109e1565b82815285828487010111156106ab578384fd5b835b838110156106c85785810183015182820184015282016106ad565b838111156106d857848385840101525b5095945050505050565b6000806000806000806000806000808a8c03610160811215610702578687fd5b8b3561070d81610aee565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610736578788fd5b6107428e828f016105a4565b9099509750506060607f1982011215610759578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c0312156107a9578485fd5b89356107b481610aee565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8111156107dd578586fd5b6107e98c828d016105a4565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610833578586fd5b8a3561083e81610aee565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610867578687fd5b6108738d828e016105a4565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b6000602082840312156108b7578081fd5b815167ffffffffffffffff808211156108ce578283fd5b9083019061014082860312156108e2578283fd5b6108ea6109b7565b8251815260208301516020820152604083015160408201526060830151606082015260808301518281111561091d578485fd5b6109298782860161065a565b60808301525061093b60a0840161064b565b60a082015261094c60c08401610502565b60c082015261095d60e08401610502565b60e08201526101008084015183811115610975578586fd5b61098188828701610512565b828401525050610120808401518381111561099a578586fd5b6109a6888287016105ee565b918301919091525095945050505050565b604051610140810167ffffffffffffffff811182821017156109db576109db610ad8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0a57610a0a610ad8565b604052919050565b600067ffffffffffffffff821115610a2c57610a2c610ad8565b5060051b60200190565b60008219821115610a4957610a49610aac565b500190565b600082610a5d57610a5d610ac2565b500490565b6000816000190483118215151615610a7c57610a7c610aac565b500290565b600082821015610a9357610a93610aac565b500390565b600082610aa757610aa7610ac2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610b1057600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
