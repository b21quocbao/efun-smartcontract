/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636341acbc1461003b578063812acab114610061575b600080fd5b61004e61004936600461053a565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046105e3565b6101e7565b6040519015158152602001610058565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101129190810190610675565b90506000610125600260208a0135610867565b15801561013a57508160600151886020013510155b9050600061014d600260208b0135610867565b600114801561016457508260600151896020013511155b9050818061016f5750805b6101bf5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b866101cb898b35610831565b6101d5919061081d565b9e9d5050505050505050505050505050565b6000806101f5600284610867565b610262578888610206856001610805565b81811061022357634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061024a57634e487b7160e01b600052603260045260246000fd5b9050602002013561025b9190610805565b90506102c7565b888861026f600186610850565b81811061028c57634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106102b357634e487b7160e01b600052603260045260246000fd5b905060200201356102c49190610805565b90505b6000886102d5876002610831565b6102df919061081d565b9050600085826102ef8b86610805565b6102f99190610805565b6103039190610831565b90506000888a8d8d8981811061032957634e487b7160e01b600052603260045260246000fd5b9050602002013561033a9190610805565b6103449190610831565b909110159e9d5050505050505050505050505050565b8051610365816108bd565b919050565b600082601f83011261037a578081fd5b8151602061038f61038a836107e1565b6107b0565b80838252828201915082860187848660051b89010111156103ae578586fd5b855b858110156103ef57815167ffffffffffffffff8111156103ce578788fd5b6103dc8a87838c01016104b2565b85525092840192908401906001016103b0565b5090979650505050505050565b60008083601f84011261040d578182fd5b50813567ffffffffffffffff811115610424578182fd5b6020830191508360208260051b850101111561043f57600080fd5b9250929050565b600082601f830112610456578081fd5b8151602061046661038a836107e1565b80838252828201915082860187848660051b8901011115610485578586fd5b855b858110156103ef57815184529284019290840190600101610487565b80516002811061036557600080fd5b600082601f8301126104c2578081fd5b815167ffffffffffffffff8111156104dc576104dc6108a7565b60206104f0601f8301601f191682016107b0565b8281528582848701011115610503578384fd5b835b83811015610520578581018301518282018401528201610505565b8381111561053057848385840101525b5095945050505050565b6000806000806000806000806000808a8c0361016081121561055a578687fd5b8b35610565816108bd565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff81111561058e578788fd5b61059a8e828f016103fc565b9099509750506060607f19820112156105b1578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b6000806000806000806000806000806101208b8d031215610602578586fd5b8a3561060d816108bd565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610636578687fd5b6106428d828e016103fc565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610686578081fd5b815167ffffffffffffffff8082111561069d578283fd5b9083019061014082860312156106b1578283fd5b6106b9610786565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156106ec578485fd5b6106f8878286016104b2565b60808301525061070a60a084016104a3565b60a082015261071b60c0840161035a565b60c082015261072c60e0840161035a565b60e08201526101008084015183811115610744578586fd5b6107508882870161036a565b8284015250506101208084015183811115610769578586fd5b61077588828701610446565b918301919091525095945050505050565b604051610140810167ffffffffffffffff811182821017156107aa576107aa6108a7565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107d9576107d96108a7565b604052919050565b600067ffffffffffffffff8211156107fb576107fb6108a7565b5060051b60200190565b600082198211156108185761081861087b565b500190565b60008261082c5761082c610891565b500490565b600081600019048311821515161561084b5761084b61087b565b500290565b6000828210156108625761086261087b565b500390565b60008261087657610876610891565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146108df57600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
