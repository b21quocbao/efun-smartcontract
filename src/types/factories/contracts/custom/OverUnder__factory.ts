/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f1b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100c857806394558f0a146100db57600080fd5b80634f4d2e1e1461006c5780636341acbc14610092575b600080fd5b61007f61007a366004610a05565b6100ee565b6040519081526020015b60405180910390f35b61007f6100a0366004610aaa565b610295565b6100b86100b3366004610bdc565b6103eb565b6040519015158152602001610089565b61007f6100d6366004610b53565b61055e565b61007f6100e9366004610bdc565b6106e8565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016f9190810190610c6e565b905082915060005b8781101561028657600061018c600283610ea0565b15801561019d575082606001518210155b905060006101ac600284610ea0565b60011480156101bf575083606001518311155b90508a8a848181106101e157634e487b7160e01b600052603260045260246000fd5b90506020020135856101f39190610e23565b945081806101fe5750805b15610273578689898581811061022457634e487b7160e01b600052603260045260246000fd5b905060200201358c8c8681811061024b57634e487b7160e01b600052603260045260246000fd5b9050602002013561025c9190610e4f565b6102669190610e3b565b6102709086610e6e565b94505b50508061027f90610e85565b9050610177565b50509998505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103169190810190610c6e565b90506000610329600260208a0135610ea0565b15801561033e57508160600151886020013510155b90506000610351600260208b0135610ea0565b600114801561036857508260600151896020013511155b905081806103735750805b6103c35760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b866103cf898b35610e4f565b6103d99190610e3b565b9e9d5050505050505050505050505050565b6000806103f9600284610ea0565b61046657888861040a856001610e23565b81811061042757634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061044e57634e487b7160e01b600052603260045260246000fd5b9050602002013561045f9190610e23565b90506104cb565b8888610473600186610e6e565b81811061049057634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106104b757634e487b7160e01b600052603260045260246000fd5b905060200201356104c89190610e23565b90505b6000886104d9876002610e4f565b6104e39190610e3b565b9050600085826104f38b86610e23565b6104fd9190610e23565b6105079190610e4f565b90506000888a8d8d8981811061052d57634e487b7160e01b600052603260045260246000fd5b9050602002013561053e9190610e23565b6105489190610e4f565b909110159e9d5050505050505050505050505050565b60008061056c600284610ea0565b6105d957878761057d856001610e23565b81811061059a57634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106105c157634e487b7160e01b600052603260045260246000fd5b905060200201356105d29190610e23565b905061063e565b87876105e6600186610e6e565b81811061060357634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061062a57634e487b7160e01b600052603260045260246000fd5b9050602002013561063b9190610e23565b90505b60008761064c876002610e4f565b6106569190610e3b565b90506000856106658385610e23565b61066f9190610e4f565b90506000888b8b8881811061069457634e487b7160e01b600052603260045260246000fd5b905060200201356106a59190610e4f565b905060006106b3888b610e6e565b905087816106c18486610e6e565b6106cb9190610e3b565b6106d59190610e4f565b9f9e505050505050505050505050505050565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561072d57600080fd5b505afa158015610741573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107699190810190610c6e565b9050846107768789610e4f565b6107809190610e3b565b9c9b505050505050505050505050565b805161079b81610ef6565b919050565b600082601f8301126107b0578081fd5b60405161018080820167ffffffffffffffff83821081831117156107d6576107d6610ee0565b81604052839150858784880111156107ec578586fd5b8593505b600c84101561082957805182811115610807578687fd5b61081389828a0161097d565b84525060019390930192602092830192016107f0565b50929695505050505050565b600082601f830112610845578081fd5b8151602061085a61085583610dff565b610dce565b80838252828201915082860187848660051b8901011115610879578586fd5b855b858110156108ba57815167ffffffffffffffff811115610899578788fd5b6108a78a87838c010161097d565b855250928401929084019060010161087b565b5090979650505050505050565b60008083601f8401126108d8578182fd5b50813567ffffffffffffffff8111156108ef578182fd5b6020830191508360208260051b850101111561090a57600080fd5b9250929050565b600082601f830112610921578081fd5b8151602061093161085583610dff565b80838252828201915082860187848660051b8901011115610950578586fd5b855b858110156108ba57815184529284019290840190600101610952565b80516002811061079b57600080fd5b600082601f83011261098d578081fd5b815167ffffffffffffffff8111156109a7576109a7610ee0565b60206109bb601f8301601f19168201610dce565b82815285828487010111156109ce578384fd5b835b838110156109eb5785810183015182820184015282016109d0565b838111156109fb57848385840101525b5095945050505050565b600080600080600080600080600060e08a8c031215610a22578485fd5b8935610a2d81610ef6565b985060208a0135975060408a0135965060608a013567ffffffffffffffff80821115610a57578687fd5b610a638d838e016108c7565b909850965060808c0135915080821115610a7b578586fd5b50610a888c828d016108c7565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000808a8c03610160811215610aca578182fd5b8b35610ad581610ef6565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610afe578283fd5b610b0a8e828f016108c7565b9099509750506060607f1982011215610b21578182fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c031215610b71578283fd5b8935610b7c81610ef6565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610ba5578384fd5b610bb18c828d016108c7565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610bfb578384fd5b8a35610c0681610ef6565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610c2f578485fd5b610c3b8d828e016108c7565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610c7f578081fd5b815167ffffffffffffffff80821115610c96578283fd5b908301906101608286031215610caa578283fd5b610cb2610da4565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610ce5578485fd5b610cf18782860161097d565b608083015250610d0360a0840161096e565b60a0820152610d1460c08401610790565b60c0820152610d2560e08401610790565b60e08201526101008084015183811115610d3d578586fd5b610d4988828701610835565b8284015250506101208084015183811115610d62578586fd5b610d6e88828701610911565b8284015250506101408084015183811115610d87578586fd5b610d93888287016107a0565b918301919091525095945050505050565b604051610160810167ffffffffffffffff81118282101715610dc857610dc8610ee0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610df757610df7610ee0565b604052919050565b600067ffffffffffffffff821115610e1957610e19610ee0565b5060051b60200190565b60008219821115610e3657610e36610eb4565b500190565b600082610e4a57610e4a610eca565b500490565b6000816000190483118215151615610e6957610e69610eb4565b500290565b600082821015610e8057610e80610eb4565b500390565b6000600019821415610e9957610e99610eb4565b5060010190565b600082610eaf57610eaf610eca565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f0b57600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
