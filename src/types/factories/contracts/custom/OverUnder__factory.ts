/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634f4d2e1e146100515780636341acbc14610077578063812acab11461008a57806383688316146100ad575b600080fd5b61006461005f366004610949565b6100c0565b6040519081526020015b60405180910390f35b6100646100853660046109ee565b610274565b61009d610098366004610b20565b6103d7565b604051901515815260200161006e565b6100646100bb366004610a97565b61054a565b604051632e34059960e01b815260048101899052600090819073ffffffffffffffffffffffffffffffffffffffff8c1690632e3405999060240160006040518083038186803b15801561011257600080fd5b505afa158015610126573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014e9190810190610bb2565b905082915060005b8781101561026557600061016b600283610de4565b15801561017c575082606001518210155b9050600061018b600284610de4565b600114801561019e575083606001518311155b90508a8a848181106101c057634e487b7160e01b600052603260045260246000fd5b90506020020135856101d29190610d67565b945081806101dd5750805b15610252578689898581811061020357634e487b7160e01b600052603260045260246000fd5b905060200201358c8c8681811061022a57634e487b7160e01b600052603260045260246000fd5b9050602002013561023b9190610d93565b6102459190610d7f565b61024f9086610db2565b94505b50508061025e90610dc9565b9050610156565b50509998505050505050505050565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103029190810190610bb2565b90506000610315600260208a0135610de4565b15801561032a57508160600151886020013510155b9050600061033d600260208b0135610de4565b600114801561035457508260600151896020013511155b9050818061035f5750805b6103af5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b866103bb898b35610d93565b6103c59190610d7f565b9e9d5050505050505050505050505050565b6000806103e5600284610de4565b6104525788886103f6856001610d67565b81811061041357634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061043a57634e487b7160e01b600052603260045260246000fd5b9050602002013561044b9190610d67565b90506104b7565b888861045f600186610db2565b81811061047c57634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106104a357634e487b7160e01b600052603260045260246000fd5b905060200201356104b49190610d67565b90505b6000886104c5876002610d93565b6104cf9190610d7f565b9050600085826104df8b86610d67565b6104e99190610d67565b6104f39190610d93565b90506000888a8d8d8981811061051957634e487b7160e01b600052603260045260246000fd5b9050602002013561052a9190610d67565b6105349190610d93565b909110159e9d5050505050505050505050505050565b600080610558600284610de4565b6105c5578787610569856001610d67565b81811061058657634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106105ad57634e487b7160e01b600052603260045260246000fd5b905060200201356105be9190610d67565b905061062a565b87876105d2600186610db2565b8181106105ef57634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061061657634e487b7160e01b600052603260045260246000fd5b905060200201356106279190610d67565b90505b600087610638876002610d93565b6106429190610d7f565b90506000856106518385610d67565b61065b9190610d93565b90506000888b8b8881811061068057634e487b7160e01b600052603260045260246000fd5b905060200201356106919190610d93565b9050600061069f888b610db2565b905087816106ad8486610db2565b6106b79190610d7f565b6106c19190610d93565b9f9e505050505050505050505050505050565b80516106df81610e3a565b919050565b600082601f8301126106f4578081fd5b60405161018080820167ffffffffffffffff838210818311171561071a5761071a610e24565b8160405283915085878488011115610730578586fd5b8593505b600c84101561076d5780518281111561074b578687fd5b61075789828a016108c1565b8452506001939093019260209283019201610734565b50929695505050505050565b600082601f830112610789578081fd5b8151602061079e61079983610d43565b610d12565b80838252828201915082860187848660051b89010111156107bd578586fd5b855b858110156107fe57815167ffffffffffffffff8111156107dd578788fd5b6107eb8a87838c01016108c1565b85525092840192908401906001016107bf565b5090979650505050505050565b60008083601f84011261081c578182fd5b50813567ffffffffffffffff811115610833578182fd5b6020830191508360208260051b850101111561084e57600080fd5b9250929050565b600082601f830112610865578081fd5b8151602061087561079983610d43565b80838252828201915082860187848660051b8901011115610894578586fd5b855b858110156107fe57815184529284019290840190600101610896565b8051600281106106df57600080fd5b600082601f8301126108d1578081fd5b815167ffffffffffffffff8111156108eb576108eb610e24565b60206108ff601f8301601f19168201610d12565b8281528582848701011115610912578384fd5b835b8381101561092f578581018301518282018401528201610914565b8381111561093f57848385840101525b5095945050505050565b600080600080600080600080600060e08a8c031215610966578485fd5b893561097181610e3a565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8082111561099b578687fd5b6109a78d838e0161080b565b909850965060808c01359150808211156109bf578586fd5b506109cc8c828d0161080b565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b6000806000806000806000806000808a8c03610160811215610a0e578182fd5b8b35610a1981610e3a565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610a42578283fd5b610a4e8e828f0161080b565b9099509750506060607f1982011215610a65578182fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c031215610ab5578283fd5b8935610ac081610e3a565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610ae9578384fd5b610af58c828d0161080b565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610b3f578384fd5b8a35610b4a81610e3a565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610b73578485fd5b610b7f8d828e0161080b565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610bc3578081fd5b815167ffffffffffffffff80821115610bda578283fd5b908301906101608286031215610bee578283fd5b610bf6610ce8565b82518152602083015160208201526040830151604082015260608301516060820152608083015182811115610c29578485fd5b610c35878286016108c1565b608083015250610c4760a084016108b2565b60a0820152610c5860c084016106d4565b60c0820152610c6960e084016106d4565b60e08201526101008084015183811115610c81578586fd5b610c8d88828701610779565b8284015250506101208084015183811115610ca6578586fd5b610cb288828701610855565b8284015250506101408084015183811115610ccb578586fd5b610cd7888287016106e4565b918301919091525095945050505050565b604051610160810167ffffffffffffffff81118282101715610d0c57610d0c610e24565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d3b57610d3b610e24565b604052919050565b600067ffffffffffffffff821115610d5d57610d5d610e24565b5060051b60200190565b60008219821115610d7a57610d7a610df8565b500190565b600082610d8e57610d8e610e0e565b500490565b6000816000190483118215151615610dad57610dad610df8565b500290565b600082821015610dc457610dc4610df8565b500390565b6000600019821415610ddd57610ddd610df8565b5060010190565b600082610df357610df3610e0e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610e5c57600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
