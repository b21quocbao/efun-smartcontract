/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636a80fa101461003b578063812acab114610061575b600080fd5b61004e610049366004610539565b610084565b6040519081526020015b60405180910390f35b61007461006f3660046105d9565b6101e6565b6040519015158152602001610058565b604051632e34059960e01b815260048101899052600090819073ffffffffffffffffffffffffffffffffffffffff8c1690632e3405999060240160006040518083038186803b1580156100d657600080fd5b505afa1580156100ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610112919081019061066b565b905060006101256002602089013561085d565b15801561013a57508160600151876020013510155b9050600061014d600260208a013561085d565b600114801561016457508260600151886020013511155b9050818061016f5750805b6101bf5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b856101cb888a35610827565b6101d59190610813565b9d9c50505050505050505050505050565b6000806101f460028461085d565b6102615788886102058560016107fb565b81811061022257634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061024957634e487b7160e01b600052603260045260246000fd5b9050602002013561025a91906107fb565b90506102c6565b888861026e600186610846565b81811061028b57634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106102b257634e487b7160e01b600052603260045260246000fd5b905060200201356102c391906107fb565b90505b6000886102d4876002610827565b6102de9190610813565b9050600085826102ee8b866107fb565b6102f891906107fb565b6103029190610827565b90506000888a8d8d8981811061032857634e487b7160e01b600052603260045260246000fd5b9050602002013561033991906107fb565b6103439190610827565b909110159e9d5050505050505050505050505050565b8051610364816108b3565b919050565b600082601f830112610379578081fd5b8151602061038e610389836107d7565b6107a6565b80838252828201915082860187848660051b89010111156103ad578586fd5b855b858110156103ee57815167ffffffffffffffff8111156103cd578788fd5b6103db8a87838c01016104b1565b85525092840192908401906001016103af565b5090979650505050505050565b60008083601f84011261040c578182fd5b50813567ffffffffffffffff811115610423578182fd5b6020830191508360208260051b850101111561043e57600080fd5b9250929050565b600082601f830112610455578081fd5b81516020610465610389836107d7565b80838252828201915082860187848660051b8901011115610484578586fd5b855b858110156103ee57815184529284019290840190600101610486565b80516002811061036457600080fd5b600082601f8301126104c1578081fd5b815167ffffffffffffffff8111156104db576104db61089d565b60206104ef601f8301601f191682016107a6565b8281528582848701011115610502578384fd5b835b8381101561051f578581018301518282018401528201610504565b8381111561052f57848385840101525b5095945050505050565b6000806000806000806000806000898b03610140811215610558578586fd5b8a35610563816108b3565b995060208b0135985060408b0135975060608b013567ffffffffffffffff81111561058c578687fd5b6105988d828e016103fb565b9098509650506060607f19820112156105af578485fd5b50979a9699509497939650919460808401945060e084013593610100810135935061012001359150565b6000806000806000806000806000806101208b8d0312156105f8578081fd5b8a35610603816108b3565b995060208b0135985060408b0135975060608b013567ffffffffffffffff81111561062c578182fd5b6106388d828e016103fb565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b60006020828403121561067c578081fd5b815167ffffffffffffffff80821115610693578283fd5b9083019061014082860312156106a7578283fd5b6106af61077c565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156106e2578485fd5b6106ee878286016104b1565b60808301525061070060a084016104a2565b60a082015261071160c08401610359565b60c082015261072260e08401610359565b60e0820152610100808401518381111561073a578586fd5b61074688828701610369565b828401525050610120808401518381111561075f578586fd5b61076b88828701610445565b918301919091525095945050505050565b604051610140810167ffffffffffffffff811182821017156107a0576107a061089d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107cf576107cf61089d565b604052919050565b600067ffffffffffffffff8211156107f1576107f161089d565b5060051b60200190565b6000821982111561080e5761080e610871565b500190565b60008261082257610822610887565b500490565b600081600019048311821515161561084157610841610871565b500290565b60008282101561085857610858610871565b500390565b60008261086c5761086c610887565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146108d557600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
