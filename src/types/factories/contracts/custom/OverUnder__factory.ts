/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bda806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636341acbc14610046578063812acab11461006c578063836883161461008f575b600080fd5b610059610054366004610777565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a3660046108a9565b610205565b6040519015158152602001610063565b61005961009d366004610820565b610378565b604051632e34059960e01b8152600481018a9052600090819073ffffffffffffffffffffffffffffffffffffffff8d1690632e3405999060240160006040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610130919081019061093b565b90506000610143600260208a0135610b52565b15801561015857508160600151886020013510155b9050600061016b600260208b0135610b52565b600114801561018257508260600151896020013511155b9050818061018d5750805b6101dd5760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b866101e9898b35610b1c565b6101f39190610b08565b9e9d5050505050505050505050505050565b600080610213600284610b52565b610280578888610224856001610af0565b81811061024157634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061026857634e487b7160e01b600052603260045260246000fd5b905060200201356102799190610af0565b90506102e5565b888861028d600186610b3b565b8181106102aa57634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106102d157634e487b7160e01b600052603260045260246000fd5b905060200201356102e29190610af0565b90505b6000886102f3876002610b1c565b6102fd9190610b08565b90506000858261030d8b86610af0565b6103179190610af0565b6103219190610b1c565b90506000888a8d8d8981811061034757634e487b7160e01b600052603260045260246000fd5b905060200201356103589190610af0565b6103629190610b1c565b909110159e9d5050505050505050505050505050565b600080610386600284610b52565b6103f3578787610397856001610af0565b8181106103b457634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106103db57634e487b7160e01b600052603260045260246000fd5b905060200201356103ec9190610af0565b9050610458565b8787610400600186610b3b565b81811061041d57634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061044457634e487b7160e01b600052603260045260246000fd5b905060200201356104559190610af0565b90505b600087610466876002610b1c565b6104709190610b08565b905060008561047f8385610af0565b6104899190610b1c565b90506000888b8b888181106104ae57634e487b7160e01b600052603260045260246000fd5b905060200201356104bf9190610b1c565b905060006104cd888b610b3b565b905087816104db8486610b3b565b6104e59190610b08565b6104ef9190610b1c565b9f9e505050505050505050505050505050565b805161050d81610ba8565b919050565b600082601f830112610522578081fd5b60405161018080820167ffffffffffffffff838210818311171561054857610548610b92565b816040528391508587848801111561055e578586fd5b8593505b600c84101561059b57805182811115610579578687fd5b61058589828a016106ef565b8452506001939093019260209283019201610562565b50929695505050505050565b600082601f8301126105b7578081fd5b815160206105cc6105c783610acc565b610a9b565b80838252828201915082860187848660051b89010111156105eb578586fd5b855b8581101561062c57815167ffffffffffffffff81111561060b578788fd5b6106198a87838c01016106ef565b85525092840192908401906001016105ed565b5090979650505050505050565b60008083601f84011261064a578182fd5b50813567ffffffffffffffff811115610661578182fd5b6020830191508360208260051b850101111561067c57600080fd5b9250929050565b600082601f830112610693578081fd5b815160206106a36105c783610acc565b80838252828201915082860187848660051b89010111156106c2578586fd5b855b8581101561062c578151845292840192908401906001016106c4565b80516002811061050d57600080fd5b600082601f8301126106ff578081fd5b815167ffffffffffffffff81111561071957610719610b92565b602061072d601f8301601f19168201610a9b565b8281528582848701011115610740578384fd5b835b8381101561075d578581018301518282018401528201610742565b8381111561076d57848385840101525b5095945050505050565b6000806000806000806000806000808a8c03610160811215610797578687fd5b8b356107a281610ba8565b9a5060208c0135995060408c0135985060608c013567ffffffffffffffff8111156107cb578788fd5b6107d78e828f01610639565b9099509750506060607f19820112156107ee578586fd5b50989b979a509598949750929560808501955060e0850135946101008101359450610120810135935061014001359150565b60008060008060008060008060006101008a8c03121561083e578485fd5b893561084981610ba8565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610872578586fd5b61087e8c828d01610639565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d0312156108c8578384fd5b8a356108d381610ba8565b995060208b0135985060408b0135975060608b013567ffffffffffffffff8111156108fc578485fd5b6109088d828e01610639565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b60006020828403121561094c578081fd5b815167ffffffffffffffff80821115610963578283fd5b908301906101608286031215610977578283fd5b61097f610a71565b825181526020830151602082015260408301516040820152606083015160608201526080830151828111156109b2578485fd5b6109be878286016106ef565b6080830152506109d060a084016106e0565b60a08201526109e160c08401610502565b60c08201526109f260e08401610502565b60e08201526101008084015183811115610a0a578586fd5b610a16888287016105a7565b8284015250506101208084015183811115610a2f578586fd5b610a3b88828701610683565b8284015250506101408084015183811115610a54578586fd5b610a6088828701610512565b918301919091525095945050505050565b604051610160810167ffffffffffffffff81118282101715610a9557610a95610b92565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ac457610ac4610b92565b604052919050565b600067ffffffffffffffff821115610ae657610ae6610b92565b5060051b60200190565b60008219821115610b0357610b03610b66565b500190565b600082610b1757610b17610b7c565b500490565b6000816000190483118215151615610b3657610b36610b66565b500290565b600082821015610b4d57610b4d610b66565b500390565b600082610b6157610b61610b7c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610bca57600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
