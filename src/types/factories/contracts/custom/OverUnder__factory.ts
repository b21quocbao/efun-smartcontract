/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OverUnder,
  OverUnderInterface,
} from "../../../contracts/custom/OverUnder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictionAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculatePotentialReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_odds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
    ],
    name: "calculateRemainLP",
    outputs: [
      {
        internalType: "uint256",
        name: "_remainLP",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "predictionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "predictOptions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct EDataTypes.Prediction",
        name: "_predictions",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_validate",
        type: "bool",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "maxPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventDataAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_predictStats",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_predictOptionStats",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_predictValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_odd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPool",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_oneHundredPrecent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "validatePrediction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e22806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063812acab111610050578063812acab1146100a557806383688316146100c857806394558f0a146100db57600080fd5b8063061bf2dc1461006c5780634f4d2e1e14610092575b600080fd5b61007f61007a3660046109fc565b6100ee565b6040519081526020015b60405180910390f35b61007f6100a0366004610957565b61024b565b6100b86100b3366004610b44565b61044b565b6040519015158152602001610089565b61007f6100d6366004610abb565b6105be565b61007f6100e9366004610b44565b61072b565b604051632e34059960e01b8152600481018b905260009081906001600160a01b038e1690632e3405999060240160006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016f9190810190610bd6565b90506000610182600260208b0135610da7565b15801561019757508160600151896020013510155b905060006101aa600260208c0135610da7565b60011480156101c1575082606001518a6020013511155b905084156102225781806101d25750805b6102225760405162461bcd60e51b815260206004820152600960248201527f6e6f2d7265776172640000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8761022e8a8c35610d56565b6102389190610d42565b9f9e505050505050505050505050505050565b604051632e34059960e01b81526004810189905260009081906001600160a01b038c1690632e3405999060240160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610bd6565b905060004282604001516202a3006102e49190610d2a565b11158015610316575060018260800151600181111561031357634e487b7160e01b600052602160045260246000fd5b14155b9050839250801561032857505061043e565b60005b8881101561043a576000610340600283610da7565b158015610351575083606001518210155b90506000610360600284610da7565b6001148015610373575084606001518311155b90508b8b8481811061039557634e487b7160e01b600052603260045260246000fd5b90506020020135866103a79190610d2a565b955081806103b25750805b1561042757878a8a858181106103d857634e487b7160e01b600052603260045260246000fd5b905060200201358d8d868181106103ff57634e487b7160e01b600052603260045260246000fd5b905060200201356104109190610d56565b61041a9190610d42565b6104249087610d75565b95505b50508061043390610d8c565b905061032b565b5050505b9998505050505050505050565b600080610459600284610da7565b6104c657888861046a856001610d2a565b81811061048757634e487b7160e01b600052603260045260246000fd5b905060200201358989858181106104ae57634e487b7160e01b600052603260045260246000fd5b905060200201356104bf9190610d2a565b905061052b565b88886104d3600186610d75565b8181106104f057634e487b7160e01b600052603260045260246000fd5b9050602002013589898581811061051757634e487b7160e01b600052603260045260246000fd5b905060200201356105289190610d2a565b90505b600088610539876002610d56565b6105439190610d42565b9050600085826105538b86610d2a565b61055d9190610d2a565b6105679190610d56565b90506000888a8d8d8981811061058d57634e487b7160e01b600052603260045260246000fd5b9050602002013561059e9190610d2a565b6105a89190610d56565b909110159e9d5050505050505050505050505050565b6000806105cc600284610da7565b6106395787876105dd856001610d2a565b8181106105fa57634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061062157634e487b7160e01b600052603260045260246000fd5b905060200201356106329190610d2a565b905061069e565b8787610646600186610d75565b81811061066357634e487b7160e01b600052603260045260246000fd5b9050602002013588888581811061068a57634e487b7160e01b600052603260045260246000fd5b9050602002013561069b9190610d2a565b90505b6000876106ac876002610d56565b6106b69190610d42565b905060006106c48284610d2a565b9050600086898c8c898181106106ea57634e487b7160e01b600052603260045260246000fd5b905060200201356106fb9190610d56565b6107059190610d42565b90506000610713888b610d75565b905080886107218486610d75565b61022e9190610d56565b604051632e34059960e01b8152600481018a905260009081906001600160a01b038d1690632e3405999060240160006040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ac9190810190610bd6565b9050846107b98789610d56565b6107c39190610d42565b9c9b505050505050505050505050565b80516107de81610dfd565b919050565b60008083601f8401126107f4578182fd5b50813567ffffffffffffffff81111561080b578182fd5b6020830191508360208260051b850101111561082657600080fd5b9250929050565b600082601f83011261083d578081fd5b8151602067ffffffffffffffff82111561085957610859610de7565b8160051b610868828201610cf9565b838152828101908684018388018501891015610882578687fd5b8693505b858410156108a4578051835260019390930192918401918401610886565b50979650505050505050565b803580151581146107de57600080fd5b8051600281106107de57600080fd5b600082601f8301126108df578081fd5b815167ffffffffffffffff8111156108f9576108f9610de7565b602061090d601f8301601f19168201610cf9565b8281528582848701011115610920578384fd5b835b8381101561093d578581018301518282018401528201610922565b8381111561094d57848385840101525b5095945050505050565b600080600080600080600080600060e08a8c031215610974578485fd5b893561097f81610dfd565b985060208a0135975060408a0135965060608a013567ffffffffffffffff808211156109a9578687fd5b6109b58d838e016107e3565b909850965060808c01359150808211156109cd578586fd5b506109da8c828d016107e3565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b60008060008060008060008060008060006101808c8e031215610a1d578182fd5b610a278c35610dfd565b8b359a5060208c0135995060408c0135985060608c013567ffffffffffffffff811115610a52578283fd5b610a5e8e828f016107e3565b90995097505060608c8e03607f19011215610a77578182fd5b60808c01955060e08c013594506101008c013593506101208c013592506101408c01359150610aa96101608d016108b0565b90509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610ad9578485fd5b8935610ae481610dfd565b985060208a0135975060408a0135965060608a013567ffffffffffffffff811115610b0d578586fd5b610b198c828d016107e3565b9a9d999c50979a97999860808901359860a0810135985060c0810135975060e0013595509350505050565b6000806000806000806000806000806101208b8d031215610b63578384fd5b8a35610b6e81610dfd565b995060208b0135985060408b0135975060608b013567ffffffffffffffff811115610b97578485fd5b610ba38d828e016107e3565b9b9e9a9d50989b989a9960808a01359960a0810135995060c0810135985060e08101359750610100013595509350505050565b600060208284031215610be7578081fd5b815167ffffffffffffffff80821115610bfe578283fd5b908301906101408286031215610c12578283fd5b610c1a610ccf565b82518152602083015160208201526040830151604082015260608301516060820152610c48608084016108c0565b6080820152610c5960a084016107d3565b60a0820152610c6a60c084016107d3565b60c082015260e083015182811115610c80578485fd5b610c8c8782860161082d565b60e0830152506101008084015183811115610ca5578586fd5b610cb1888287016108cf565b91830191909152506101209283015192810192909252509392505050565b604051610140810167ffffffffffffffff81118282101715610cf357610cf3610de7565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d2257610d22610de7565b604052919050565b60008219821115610d3d57610d3d610dbb565b500190565b600082610d5157610d51610dd1565b500490565b6000816000190483118215151615610d7057610d70610dbb565b500290565b600082821015610d8757610d87610dbb565b500390565b6000600019821415610da057610da0610dbb565b5060010190565b600082610db657610db6610dd1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e1257600080fd5b5056fea164736f6c6343000804000a";

type OverUnderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverUnderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverUnder__factory extends ContractFactory {
  constructor(...args: OverUnderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OverUnder> {
    return super.deploy(overrides || {}) as Promise<OverUnder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OverUnder {
    return super.attach(address) as OverUnder;
  }
  override connect(signer: Signer): OverUnder__factory {
    return super.connect(signer) as OverUnder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverUnderInterface {
    return new utils.Interface(_abi) as OverUnderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OverUnder {
    return new Contract(address, _abi, signerOrProvider) as OverUnder;
  }
}
