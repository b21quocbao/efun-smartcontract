/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace SDataTypesExt {
  export type ResultsStruct = {
    rType: BigNumberish[];
    rValueFrom: BigNumberish[];
    rValueTo: BigNumberish[];
  };

  export type ResultsStructOutput = [BigNumber[], BigNumber[], BigNumber[]] & {
    rType: BigNumber[];
    rValueFrom: BigNumber[];
    rValueTo: BigNumber[];
  };

  export type MatchStruct = {
    description: BytesLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    resultTime: BigNumberish;
    winOption: BigNumberish;
    status: BigNumberish;
    sToken: string;
    oToken: string;
    sResult: SDataTypesExt.ResultsStruct;
  };

  export type MatchStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    SDataTypesExt.ResultsStructOutput
  ] & {
    description: string;
    startTime: BigNumber;
    endTime: BigNumber;
    resultTime: BigNumber;
    winOption: BigNumber;
    status: number;
    sToken: string;
    oToken: string;
    sResult: SDataTypesExt.ResultsStructOutput;
  };
}

export interface SIMatchExtInterface extends utils.Interface {
  functions: {
    "info(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "info"): FunctionFragment;

  encodeFunctionData(functionFragment: "info", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;

  events: {};
}

export interface SIMatchExt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SIMatchExtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SDataTypesExt.MatchStructOutput] & {
        _match: SDataTypesExt.MatchStructOutput;
      }
    >;
  };

  info(
    _matchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SDataTypesExt.MatchStructOutput>;

  callStatic: {
    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SDataTypesExt.MatchStructOutput>;
  };

  filters: {};

  estimateGas: {
    info(_matchId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
