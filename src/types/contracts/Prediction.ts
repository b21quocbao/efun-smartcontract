/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace EDataTypes {
  export type PredictionStruct = {
    predictionAmount: BigNumberish;
    predictOptions: BigNumberish;
    claimed: boolean;
  };

  export type PredictionStructOutput = [BigNumber, BigNumber, boolean] & {
    predictionAmount: BigNumber;
    predictOptions: BigNumber;
    claimed: boolean;
  };
}

export interface PredictionInterface extends utils.Interface {
  functions: {
    "bnbRate()": FunctionFragment;
    "calculateSponsor(uint256,address,uint256,uint256)": FunctionFragment;
    "claimCashBack(uint256,address,uint256)": FunctionFragment;
    "claimRemainingLP(uint256,address[])": FunctionFragment;
    "claimReward(uint256,address,uint256)": FunctionFragment;
    "createSingleEvent(uint256,uint256,uint256,address,uint256[],string,address[],uint256[],uint256)": FunctionFragment;
    "depositLP(uint256,address[],uint256[])": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "estimateReward(uint256,address,address,uint256,bool)": FunctionFragment;
    "estimateRewardSponsor(uint256,address,address,uint256)": FunctionFragment;
    "eventData()": FunctionFragment;
    "eventDataAddress()": FunctionFragment;
    "feeBNB()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "feeEFUN()": FunctionFragment;
    "getEventInfo(uint256,address)": FunctionFragment;
    "getLiquidityPool(uint256,address)": FunctionFragment;
    "getMaxPayout(uint256,address,uint256)": FunctionFragment;
    "getPotentialReward(uint256,address,uint256,uint256)": FunctionFragment;
    "getPredictInfo(uint256,address,address,uint256)": FunctionFragment;
    "getRemainingLP(uint256,address[])": FunctionFragment;
    "getTokenAmount(address)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "lotCollector()": FunctionFragment;
    "lotRate()": FunctionFragment;
    "numPredicts(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "participateRate()": FunctionFragment;
    "predict(uint256,uint256[],address[],uint256[])": FunctionFragment;
    "predictOptionStats(address,uint256,uint256)": FunctionFragment;
    "predictStats(address,uint256)": FunctionFragment;
    "predictions(address,address,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setBnbRate(uint256)": FunctionFragment;
    "setEventData(address)": FunctionFragment;
    "setFeeBNB(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFeeEFUN(uint256)": FunctionFragment;
    "setFeeLot(uint256)": FunctionFragment;
    "setLotCollector(address)": FunctionFragment;
    "setRewardToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bnbRate"
      | "calculateSponsor"
      | "claimCashBack"
      | "claimRemainingLP"
      | "claimReward"
      | "createSingleEvent"
      | "depositLP"
      | "emergencyWithdraw"
      | "estimateReward"
      | "estimateRewardSponsor"
      | "eventData"
      | "eventDataAddress"
      | "feeBNB"
      | "feeCollector"
      | "feeEFUN"
      | "getEventInfo"
      | "getLiquidityPool"
      | "getMaxPayout"
      | "getPotentialReward"
      | "getPredictInfo"
      | "getRemainingLP"
      | "getTokenAmount"
      | "initialize"
      | "lotCollector"
      | "lotRate"
      | "numPredicts"
      | "owner"
      | "participateRate"
      | "predict"
      | "predictOptionStats"
      | "predictStats"
      | "predictions"
      | "renounceOwnership"
      | "rewardToken"
      | "setBnbRate"
      | "setEventData"
      | "setFeeBNB"
      | "setFeeCollector"
      | "setFeeEFUN"
      | "setFeeLot"
      | "setLotCollector"
      | "setRewardToken"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bnbRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateSponsor",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCashBack",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRemainingLP",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSingleEvent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish[],
      string,
      string[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLP",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateReward",
    values: [BigNumberish, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRewardSponsor",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eventData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventDataAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeBNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeEFUN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEventInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPool",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialReward",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPredictInfo",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingLP",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lotCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lotRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numPredicts",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participateRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predict",
    values: [BigNumberish, BigNumberish[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "predictOptionStats",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictStats",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBnbRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBNB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeEFUN",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeLot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bnbRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCashBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRemainingLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSingleEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRewardSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventDataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeEFUN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPredictInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numPredicts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participateRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "predict", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictOptionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBnbRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEventData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeEFUN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeLot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLotCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CashBackClaimed(uint256,uint256,address,address)": EventFragment;
    "EventCreated(uint256,uint256,uint256,uint256,address,address,uint256[],string,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LPClaimed(uint256,address,uint256)": EventFragment;
    "LPDeposited(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PredictionCreated(uint256,uint256,address,uint256,address,uint256)": EventFragment;
    "RewardClaimed(uint256,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CashBackClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export interface CashBackClaimedEventObject {
  eventId: BigNumber;
  predictNum: BigNumber;
  user: string;
  token: string;
}
export type CashBackClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  CashBackClaimedEventObject
>;

export type CashBackClaimedEventFilter = TypedEventFilter<CashBackClaimedEvent>;

export interface EventCreatedEventObject {
  idx: BigNumber;
  startTime: BigNumber;
  deadlineTime: BigNumber;
  endTime: BigNumber;
  helperAddress: string;
  creator: string;
  odds: BigNumber[];
  datas: string;
  pro: BigNumber;
}
export type EventCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber[],
    string,
    BigNumber
  ],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LPClaimedEventObject {
  eventId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type LPClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LPClaimedEventObject
>;

export type LPClaimedEventFilter = TypedEventFilter<LPClaimedEvent>;

export interface LPDepositedEventObject {
  eventId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type LPDepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LPDepositedEventObject
>;

export type LPDepositedEventFilter = TypedEventFilter<LPDepositedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PredictionCreatedEventObject {
  eventId: BigNumber;
  predictNum: BigNumber;
  user: string;
  optionIndex: BigNumber;
  token: string;
  amount: BigNumber;
}
export type PredictionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, BigNumber],
  PredictionCreatedEventObject
>;

export type PredictionCreatedEventFilter =
  TypedEventFilter<PredictionCreatedEvent>;

export interface RewardClaimedEventObject {
  eventId: BigNumber;
  predictNum: BigNumber;
  user: string;
  token: string;
  reward: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface Prediction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PredictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bnbRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSponsor(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimCashBack(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _odds: BigNumberish[],
      _datas: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      _pro: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLP(
      _eventId: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      _validate: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateRewardSponsor(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eventData(overrides?: CallOverrides): Promise<[string]>;

    eventDataAddress(overrides?: CallOverrides): Promise<[string]>;

    feeBNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feeEFUN(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidityPool(
      _eventId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxPayout(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPotentialReward(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[EDataTypes.PredictionStructOutput]>;

    getRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lotCollector(overrides?: CallOverrides): Promise<[string]>;

    lotRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    numPredicts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    participateRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    predict(
      _eventId: BigNumberish,
      _optionIndexs: BigNumberish[],
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictOptionStats(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    predictStats(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        predictionAmount: BigNumber;
        predictOptions: BigNumber;
        claimed: boolean;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventData(
      _eventData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBNB(
      _feeBNB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeLot(
      _lotRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotCollector(
      _lotCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bnbRate(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSponsor(
    _eventId: BigNumberish,
    _token: string,
    _index: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimCashBack(
    _eventId: BigNumberish,
    _token: string,
    _predictNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRemainingLP(
    _eventId: BigNumberish,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _eventId: BigNumberish,
    _token: string,
    _predictNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSingleEvent(
    _startTime: BigNumberish,
    _deadlineTime: BigNumberish,
    _endTime: BigNumberish,
    _helperAddress: string,
    _odds: BigNumberish[],
    _datas: string,
    _tokens: string[],
    _amounts: BigNumberish[],
    _pro: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLP(
    _eventId: BigNumberish,
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateReward(
    _eventId: BigNumberish,
    _user: string,
    _token: string,
    _predictNum: BigNumberish,
    _validate: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateRewardSponsor(
    _eventId: BigNumberish,
    _user: string,
    _token: string,
    _predictNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eventData(overrides?: CallOverrides): Promise<string>;

  eventDataAddress(overrides?: CallOverrides): Promise<string>;

  feeBNB(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feeEFUN(overrides?: CallOverrides): Promise<BigNumber>;

  getEventInfo(
    eventId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidityPool(
    _eventId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxPayout(
    _eventId: BigNumberish,
    _token: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPotentialReward(
    _eventId: BigNumberish,
    _token: string,
    _index: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPredictInfo(
    eventId: BigNumberish,
    account: string,
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<EDataTypes.PredictionStructOutput>;

  getRemainingLP(
    _eventId: BigNumberish,
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenAmount(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _participateRate: BigNumberish,
    _oneHundredPrecent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lotCollector(overrides?: CallOverrides): Promise<string>;

  lotRate(overrides?: CallOverrides): Promise<BigNumber>;

  numPredicts(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  participateRate(overrides?: CallOverrides): Promise<BigNumber>;

  predict(
    _eventId: BigNumberish,
    _optionIndexs: BigNumberish[],
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictOptionStats(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  predictStats(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  predictions(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      predictionAmount: BigNumber;
      predictOptions: BigNumber;
      claimed: boolean;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setBnbRate(
    _bnbRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventData(
    _eventData: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBNB(
    _feeBNB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeEFUN(
    _feeEFUN: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeLot(
    _lotRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotCollector(
    _lotCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardToken(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bnbRate(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSponsor(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimCashBack(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _odds: BigNumberish[],
      _datas: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      _pro: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLP(
      _eventId: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      _validate: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRewardSponsor(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventData(overrides?: CallOverrides): Promise<string>;

    eventDataAddress(overrides?: CallOverrides): Promise<string>;

    feeBNB(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feeEFUN(overrides?: CallOverrides): Promise<BigNumber>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPool(
      _eventId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPayout(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotentialReward(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<EDataTypes.PredictionStructOutput>;

    getRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lotCollector(overrides?: CallOverrides): Promise<string>;

    lotRate(overrides?: CallOverrides): Promise<BigNumber>;

    numPredicts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    participateRate(overrides?: CallOverrides): Promise<BigNumber>;

    predict(
      _eventId: BigNumberish,
      _optionIndexs: BigNumberish[],
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    predictOptionStats(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictStats(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        predictionAmount: BigNumber;
        predictOptions: BigNumber;
        claimed: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventData(_eventData: string, overrides?: CallOverrides): Promise<void>;

    setFeeBNB(_feeBNB: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeLot(_lotRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLotCollector(
      _lotCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CashBackClaimed(uint256,uint256,address,address)"(
      eventId?: null,
      predictNum?: null,
      user?: null,
      token?: null
    ): CashBackClaimedEventFilter;
    CashBackClaimed(
      eventId?: null,
      predictNum?: null,
      user?: null,
      token?: null
    ): CashBackClaimedEventFilter;

    "EventCreated(uint256,uint256,uint256,uint256,address,address,uint256[],string,uint256)"(
      idx?: null,
      startTime?: null,
      deadlineTime?: null,
      endTime?: null,
      helperAddress?: null,
      creator?: null,
      odds?: null,
      datas?: null,
      pro?: null
    ): EventCreatedEventFilter;
    EventCreated(
      idx?: null,
      startTime?: null,
      deadlineTime?: null,
      endTime?: null,
      helperAddress?: null,
      creator?: null,
      odds?: null,
      datas?: null,
      pro?: null
    ): EventCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LPClaimed(uint256,address,uint256)"(
      eventId?: null,
      token?: null,
      amount?: null
    ): LPClaimedEventFilter;
    LPClaimed(
      eventId?: null,
      token?: null,
      amount?: null
    ): LPClaimedEventFilter;

    "LPDeposited(uint256,address,uint256)"(
      eventId?: null,
      token?: null,
      amount?: null
    ): LPDepositedEventFilter;
    LPDeposited(
      eventId?: null,
      token?: null,
      amount?: null
    ): LPDepositedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PredictionCreated(uint256,uint256,address,uint256,address,uint256)"(
      eventId?: null,
      predictNum?: null,
      user?: null,
      optionIndex?: null,
      token?: null,
      amount?: null
    ): PredictionCreatedEventFilter;
    PredictionCreated(
      eventId?: null,
      predictNum?: null,
      user?: null,
      optionIndex?: null,
      token?: null,
      amount?: null
    ): PredictionCreatedEventFilter;

    "RewardClaimed(uint256,uint256,address,address,uint256)"(
      eventId?: null,
      predictNum?: null,
      user?: null,
      token?: null,
      reward?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      eventId?: null,
      predictNum?: null,
      user?: null,
      token?: null,
      reward?: null
    ): RewardClaimedEventFilter;
  };

  estimateGas: {
    bnbRate(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSponsor(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimCashBack(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _odds: BigNumberish[],
      _datas: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      _pro: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLP(
      _eventId: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      _validate: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRewardSponsor(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventData(overrides?: CallOverrides): Promise<BigNumber>;

    eventDataAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feeBNB(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feeEFUN(overrides?: CallOverrides): Promise<BigNumber>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPool(
      _eventId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPayout(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotentialReward(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lotCollector(overrides?: CallOverrides): Promise<BigNumber>;

    lotRate(overrides?: CallOverrides): Promise<BigNumber>;

    numPredicts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    participateRate(overrides?: CallOverrides): Promise<BigNumber>;

    predict(
      _eventId: BigNumberish,
      _optionIndexs: BigNumberish[],
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictOptionStats(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictStats(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventData(
      _eventData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBNB(
      _feeBNB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeLot(
      _lotRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotCollector(
      _lotCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bnbRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSponsor(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimCashBack(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _odds: BigNumberish[],
      _datas: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      _pro: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLP(
      _eventId: BigNumberish,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      _validate: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRewardSponsor(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _predictNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventDataAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeEFUN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPool(
      _eventId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPayout(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPotentialReward(
      _eventId: BigNumberish,
      _token: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingLP(
      _eventId: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lotCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPredicts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participateRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predict(
      _eventId: BigNumberish,
      _optionIndexs: BigNumberish[],
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictOptionStats(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictStats(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventData(
      _eventData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBNB(
      _feeBNB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeLot(
      _lotRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotCollector(
      _lotCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
