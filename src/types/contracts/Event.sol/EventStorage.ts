/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface EventStorageInterface extends utils.Interface {
  functions: {
    "events(uint256)": FunctionFragment;
    "nEvents()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "events" | "nEvents"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nEvents", values?: undefined): string;

  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nEvents", data: BytesLike): Result;

  events: {};
}

export interface EventStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        startTime: BigNumber;
        deadlineTime: BigNumber;
        endTime: BigNumber;
        resultIndex: BigNumber;
        status: number;
        helperAddress: string;
        creator: string;
        _datas: string;
        pro: BigNumber;
        isBlock: boolean;
        finalTime: BigNumber;
        claimTime: BigNumber;
        affiliate: boolean;
        hostFee: BigNumber;
      }
    >;

    nEvents(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  events(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      startTime: BigNumber;
      deadlineTime: BigNumber;
      endTime: BigNumber;
      resultIndex: BigNumber;
      status: number;
      helperAddress: string;
      creator: string;
      _datas: string;
      pro: BigNumber;
      isBlock: boolean;
      finalTime: BigNumber;
      claimTime: BigNumber;
      affiliate: boolean;
      hostFee: BigNumber;
    }
  >;

  nEvents(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        startTime: BigNumber;
        deadlineTime: BigNumber;
        endTime: BigNumber;
        resultIndex: BigNumber;
        status: number;
        helperAddress: string;
        creator: string;
        _datas: string;
        pro: BigNumber;
        isBlock: boolean;
        finalTime: BigNumber;
        claimTime: BigNumber;
        affiliate: boolean;
        hostFee: BigNumber;
      }
    >;

    nEvents(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    events(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nEvents(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
