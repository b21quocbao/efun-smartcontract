/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace MDataTypes {
  export type ScoreStruct = {
    firstTeam: BigNumberish;
    secondTeam: BigNumberish;
  };

  export type ScoreStructOutput = [BigNumber, BigNumber] & {
    firstTeam: BigNumber;
    secondTeam: BigNumber;
  };

  export type MatchStruct = {
    description: BytesLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    score: MDataTypes.ScoreStruct;
    status: BigNumberish;
    sToken: string;
    sTotal: BigNumberish;
  };

  export type MatchStructOutput = [
    string,
    BigNumber,
    BigNumber,
    MDataTypes.ScoreStructOutput,
    number,
    string,
    BigNumber
  ] & {
    description: string;
    startTime: BigNumber;
    endTime: BigNumber;
    score: MDataTypes.ScoreStructOutput;
    status: number;
    sToken: string;
    sTotal: BigNumber;
  };
}

export interface MiniMatchInterface extends utils.Interface {
  functions: {
    "createMatches(bytes32[],uint256[],uint256[],address[],uint256[])": FunctionFragment;
    "info(uint256)": FunctionFragment;
    "matches(uint256)": FunctionFragment;
    "nMatches()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminPermission(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMatchScores(uint256[],uint256[],uint256[])": FunctionFragment;
    "updateMatchStatuses(uint256[],uint8[])": FunctionFragment;
    "updateSToken(uint256[],address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createMatches"
      | "info"
      | "matches"
      | "nMatches"
      | "owner"
      | "renounceOwnership"
      | "setAdminPermission"
      | "transferOwnership"
      | "updateMatchScores"
      | "updateMatchStatuses"
      | "updateSToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createMatches",
    values: [
      BytesLike[],
      BigNumberish[],
      BigNumberish[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "info", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nMatches", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminPermission",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMatchScores",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMatchStatuses",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSToken",
    values: [BigNumberish[], string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nMatches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMatchScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMatchStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSToken",
    data: BytesLike
  ): Result;

  events: {
    "MatchCreated(uint256,bytes32,uint256,uint256,address,uint256)": EventFragment;
    "MatchScoreUpdated(address,uint256,tuple)": EventFragment;
    "MatchStatusUpdated(address,uint256,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MatchCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchScoreUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface MatchCreatedEventObject {
  idx: BigNumber;
  descriptions: string;
  startTime: BigNumber;
  endTime: BigNumber;
  sToken: string;
  sTotal: BigNumber;
}
export type MatchCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, BigNumber],
  MatchCreatedEventObject
>;

export type MatchCreatedEventFilter = TypedEventFilter<MatchCreatedEvent>;

export interface MatchScoreUpdatedEventObject {
  caller: string;
  matchId: BigNumber;
  score: MDataTypes.ScoreStructOutput;
}
export type MatchScoreUpdatedEvent = TypedEvent<
  [string, BigNumber, MDataTypes.ScoreStructOutput],
  MatchScoreUpdatedEventObject
>;

export type MatchScoreUpdatedEventFilter =
  TypedEventFilter<MatchScoreUpdatedEvent>;

export interface MatchStatusUpdatedEventObject {
  caller: string;
  matchId: BigNumber;
  status: number;
}
export type MatchStatusUpdatedEvent = TypedEvent<
  [string, BigNumber, number],
  MatchStatusUpdatedEventObject
>;

export type MatchStatusUpdatedEventFilter =
  TypedEventFilter<MatchStatusUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MiniMatch extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiniMatchInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMatches(
      _descriptions: BytesLike[],
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [MDataTypes.MatchStructOutput] & { _match: MDataTypes.MatchStructOutput }
    >;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        MDataTypes.ScoreStructOutput,
        number,
        string,
        BigNumber
      ] & {
        description: string;
        startTime: BigNumber;
        endTime: BigNumber;
        score: MDataTypes.ScoreStructOutput;
        status: number;
        sToken: string;
        sTotal: BigNumber;
      }
    >;

    nMatches(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminPermission(
      _admin: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMatchScores(
      _matchIds: BigNumberish[],
      _point1: BigNumberish[],
      _point2: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMatchStatuses(
      _matchIds: BigNumberish[],
      _status: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSToken(
      _matchIds: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createMatches(
    _descriptions: BytesLike[],
    _startTimes: BigNumberish[],
    _endTimes: BigNumberish[],
    _sToken: string[],
    _sTotal: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  info(
    _matchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MDataTypes.MatchStructOutput>;

  matches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      MDataTypes.ScoreStructOutput,
      number,
      string,
      BigNumber
    ] & {
      description: string;
      startTime: BigNumber;
      endTime: BigNumber;
      score: MDataTypes.ScoreStructOutput;
      status: number;
      sToken: string;
      sTotal: BigNumber;
    }
  >;

  nMatches(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminPermission(
    _admin: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMatchScores(
    _matchIds: BigNumberish[],
    _point1: BigNumberish[],
    _point2: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMatchStatuses(
    _matchIds: BigNumberish[],
    _status: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSToken(
    _matchIds: BigNumberish[],
    _sToken: string[],
    _sTotal: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createMatches(
      _descriptions: BytesLike[],
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MDataTypes.MatchStructOutput>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        MDataTypes.ScoreStructOutput,
        number,
        string,
        BigNumber
      ] & {
        description: string;
        startTime: BigNumber;
        endTime: BigNumber;
        score: MDataTypes.ScoreStructOutput;
        status: number;
        sToken: string;
        sTotal: BigNumber;
      }
    >;

    nMatches(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminPermission(
      _admin: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMatchScores(
      _matchIds: BigNumberish[],
      _point1: BigNumberish[],
      _point2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateMatchStatuses(
      _matchIds: BigNumberish[],
      _status: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSToken(
      _matchIds: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MatchCreated(uint256,bytes32,uint256,uint256,address,uint256)"(
      idx?: null,
      descriptions?: null,
      startTime?: null,
      endTime?: null,
      sToken?: null,
      sTotal?: null
    ): MatchCreatedEventFilter;
    MatchCreated(
      idx?: null,
      descriptions?: null,
      startTime?: null,
      endTime?: null,
      sToken?: null,
      sTotal?: null
    ): MatchCreatedEventFilter;

    "MatchScoreUpdated(address,uint256,tuple)"(
      caller?: null,
      matchId?: null,
      score?: null
    ): MatchScoreUpdatedEventFilter;
    MatchScoreUpdated(
      caller?: null,
      matchId?: null,
      score?: null
    ): MatchScoreUpdatedEventFilter;

    "MatchStatusUpdated(address,uint256,uint8)"(
      caller?: null,
      matchId?: null,
      status?: null
    ): MatchStatusUpdatedEventFilter;
    MatchStatusUpdated(
      caller?: null,
      matchId?: null,
      status?: null
    ): MatchStatusUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createMatches(
      _descriptions: BytesLike[],
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    info(_matchId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    matches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nMatches(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminPermission(
      _admin: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMatchScores(
      _matchIds: BigNumberish[],
      _point1: BigNumberish[],
      _point2: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMatchStatuses(
      _matchIds: BigNumberish[],
      _status: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSToken(
      _matchIds: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMatches(
      _descriptions: BytesLike[],
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nMatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminPermission(
      _admin: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMatchScores(
      _matchIds: BigNumberish[],
      _point1: BigNumberish[],
      _point2: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMatchStatuses(
      _matchIds: BigNumberish[],
      _status: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSToken(
      _matchIds: BigNumberish[],
      _sToken: string[],
      _sTotal: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
