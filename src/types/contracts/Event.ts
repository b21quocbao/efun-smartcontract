/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace EDataTypes {
  export type OptionStruct = { data: string[]; odds: BigNumberish[] };

  export type OptionStructOutput = [string[], BigNumber[]] & {
    data: string[];
    odds: BigNumber[];
  };

  export type EventStruct = {
    startTime: BigNumberish;
    deadlineTime: BigNumberish;
    endTime: BigNumberish;
    resultIndex: BigNumberish;
    result: string;
    status: BigNumberish;
    helperAddress: string;
    creator: string;
    options: string[];
    odds: BigNumberish[];
    _datas: string[];
  };

  export type EventStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string,
    string[],
    BigNumber[],
    string[]
  ] & {
    startTime: BigNumber;
    deadlineTime: BigNumber;
    endTime: BigNumber;
    resultIndex: BigNumber;
    result: string;
    status: number;
    helperAddress: string;
    creator: string;
    options: string[];
    odds: BigNumber[];
    _datas: string[];
  };
}

export interface EventInterface extends utils.Interface {
  functions: {
    "createSingleEvent(uint256,uint256,uint256,address,(string[],uint256[]),string[12])": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "info(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "nEvents()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateEventResult(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSingleEvent"
      | "events"
      | "info"
      | "initialize"
      | "nEvents"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateEventResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSingleEvent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      EDataTypes.OptionStruct,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "info", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nEvents", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEventResult",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSingleEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nEvents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEventResult",
    data: BytesLike
  ): Result;

  events: {
    "EventCreated(uint256,uint256,uint256,uint256,address,address,tuple,string[12])": EventFragment;
    "EventResultUpdated(address,uint256,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventResultUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface EventCreatedEventObject {
  idx: BigNumber;
  startTime: BigNumber;
  deadlineTime: BigNumber;
  endTime: BigNumber;
  helperAddress: string;
  creator: string;
  options: EDataTypes.OptionStructOutput;
  datas: string[];
}
export type EventCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    EDataTypes.OptionStructOutput,
    string[]
  ],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface EventResultUpdatedEventObject {
  caller: string;
  eventId: BigNumber;
  result: string;
}
export type EventResultUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  EventResultUpdatedEventObject
>;

export type EventResultUpdatedEventFilter =
  TypedEventFilter<EventResultUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Event extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _options: EDataTypes.OptionStruct,
      _datas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        string,
        string
      ] & {
        startTime: BigNumber;
        deadlineTime: BigNumber;
        endTime: BigNumber;
        resultIndex: BigNumber;
        result: string;
        status: number;
        helperAddress: string;
        creator: string;
      }
    >;

    info(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [EDataTypes.EventStructOutput] & { _event: EDataTypes.EventStructOutput }
    >;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nEvents(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEventResult(
      _eventId: BigNumberish,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createSingleEvent(
    _startTime: BigNumberish,
    _deadlineTime: BigNumberish,
    _endTime: BigNumberish,
    _helperAddress: string,
    _options: EDataTypes.OptionStruct,
    _datas: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  events(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number,
      string,
      string
    ] & {
      startTime: BigNumber;
      deadlineTime: BigNumber;
      endTime: BigNumber;
      resultIndex: BigNumber;
      result: string;
      status: number;
      helperAddress: string;
      creator: string;
    }
  >;

  info(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<EDataTypes.EventStructOutput>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nEvents(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEventResult(
    _eventId: BigNumberish,
    _result: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _options: EDataTypes.OptionStruct,
      _datas: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        string,
        string
      ] & {
        startTime: BigNumber;
        deadlineTime: BigNumber;
        endTime: BigNumber;
        resultIndex: BigNumber;
        result: string;
        status: number;
        helperAddress: string;
        creator: string;
      }
    >;

    info(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<EDataTypes.EventStructOutput>;

    initialize(overrides?: CallOverrides): Promise<void>;

    nEvents(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEventResult(
      _eventId: BigNumberish,
      _result: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventCreated(uint256,uint256,uint256,uint256,address,address,tuple,string[12])"(
      idx?: null,
      startTime?: null,
      deadlineTime?: null,
      endTime?: null,
      helperAddress?: null,
      creator?: null,
      options?: null,
      datas?: null
    ): EventCreatedEventFilter;
    EventCreated(
      idx?: null,
      startTime?: null,
      deadlineTime?: null,
      endTime?: null,
      helperAddress?: null,
      creator?: null,
      options?: null,
      datas?: null
    ): EventCreatedEventFilter;

    "EventResultUpdated(address,uint256,string)"(
      caller?: null,
      eventId?: null,
      result?: null
    ): EventResultUpdatedEventFilter;
    EventResultUpdated(
      caller?: null,
      eventId?: null,
      result?: null
    ): EventResultUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _options: EDataTypes.OptionStruct,
      _datas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    events(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    info(_eventId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nEvents(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEventResult(
      _eventId: BigNumberish,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSingleEvent(
      _startTime: BigNumberish,
      _deadlineTime: BigNumberish,
      _endTime: BigNumberish,
      _helperAddress: string,
      _options: EDataTypes.OptionStruct,
      _datas: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEventResult(
      _eventId: BigNumberish,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
