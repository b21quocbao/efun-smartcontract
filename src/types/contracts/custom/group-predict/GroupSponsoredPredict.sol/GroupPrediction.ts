/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace GDataTypes {
  export type GroupPredictStatsStruct = {
    predictionAmount: BigNumberish;
    predictOptions: string;
  };

  export type GroupPredictStatsStructOutput = [BigNumber, string] & {
    predictionAmount: BigNumber;
    predictOptions: string;
  };

  export type GroupPredictionStruct = {
    predictionAmount: BigNumberish;
    numPredict: BigNumberish;
    predictOptions: string;
    claimed: boolean;
  };

  export type GroupPredictionStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    predictionAmount: BigNumber;
    numPredict: BigNumber;
    predictOptions: string;
    claimed: boolean;
  };
}

export interface GroupPredictionInterface extends utils.Interface {
  functions: {
    "bnbRate()": FunctionFragment;
    "burnWallet()": FunctionFragment;
    "calculateReward(uint256,address,address,address)": FunctionFragment;
    "calculateTest()": FunctionFragment;
    "claimReward(uint256,address,address)": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "eventData()": FunctionFragment;
    "feeBNB()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "feeEFUN()": FunctionFragment;
    "getEventInfo(uint256,address)": FunctionFragment;
    "getPredictInfo(uint256,address,address)": FunctionFragment;
    "getSponsorToken(uint256)": FunctionFragment;
    "getSponsorTotal(uint256,address)": FunctionFragment;
    "includeSponsorTokenBack()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "lotCollector()": FunctionFragment;
    "lotRate()": FunctionFragment;
    "numPredict()": FunctionFragment;
    "owner()": FunctionFragment;
    "participateRate()": FunctionFragment;
    "predict(uint256,string,address,uint256)": FunctionFragment;
    "predictions(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setBnbRate(uint256)": FunctionFragment;
    "setEventData(address)": FunctionFragment;
    "setFeeBNB(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFeeEFUN(uint256)": FunctionFragment;
    "setFeeLot(uint256)": FunctionFragment;
    "setLotCollector(address)": FunctionFragment;
    "setNumPredict(uint256)": FunctionFragment;
    "setRewardSponsorToken(bool)": FunctionFragment;
    "setRewardToken(address)": FunctionFragment;
    "setSponsorTotal(uint256,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bnbRate"
      | "burnWallet"
      | "calculateReward"
      | "calculateTest"
      | "claimReward"
      | "emergencyWithdraw"
      | "eventData"
      | "feeBNB"
      | "feeCollector"
      | "feeEFUN"
      | "getEventInfo"
      | "getPredictInfo"
      | "getSponsorToken"
      | "getSponsorTotal"
      | "includeSponsorTokenBack"
      | "initialize"
      | "lotCollector"
      | "lotRate"
      | "numPredict"
      | "owner"
      | "participateRate"
      | "predict"
      | "predictions"
      | "renounceOwnership"
      | "rewardToken"
      | "setBnbRate"
      | "setEventData"
      | "setFeeBNB"
      | "setFeeCollector"
      | "setFeeEFUN"
      | "setFeeLot"
      | "setLotCollector"
      | "setNumPredict"
      | "setRewardSponsorToken"
      | "setRewardToken"
      | "setSponsorTotal"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bnbRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eventData", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeBNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeEFUN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEventInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPredictInfo",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSponsorToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSponsorTotal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeSponsorTokenBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "lotCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lotRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numPredict",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participateRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predict",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBnbRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBNB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeEFUN",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeLot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumPredict",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardSponsorToken",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSponsorTotal",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bnbRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeEFUN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPredictInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSponsorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSponsorTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeSponsorTokenBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numPredict", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participateRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "predict", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBnbRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEventData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeEFUN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeLot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLotCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumPredict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardSponsorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSponsorTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PredictionCreated(uint256,string,address,uint256)": EventFragment;
    "RewardClaimed(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PredictionCreatedEventObject {
  eventId: BigNumber;
  options: string;
  token: string;
  amount: BigNumber;
}
export type PredictionCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PredictionCreatedEventObject
>;

export type PredictionCreatedEventFilter =
  TypedEventFilter<PredictionCreatedEvent>;

export interface RewardClaimedEventObject {
  eventId: BigNumber;
  token: string;
  reward: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface GroupPrediction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GroupPredictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bnbRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnWallet(overrides?: CallOverrides): Promise<[string]>;

    calculateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _reward: BigNumber;
        _totalCorrect: BigNumber;
        _sponsorReward: BigNumber;
      }
    >;

    calculateTest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reward: BigNumber; _sponsorReward: BigNumber }
    >;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _saToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventData(overrides?: CallOverrides): Promise<[string]>;

    feeBNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feeEFUN(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[GDataTypes.GroupPredictStatsStructOutput]>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[GDataTypes.GroupPredictionStructOutput]>;

    getSponsorToken(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSponsorTotal(
      eventId: BigNumberish,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    includeSponsorTokenBack(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _burnWallet: string,
      _numPredict: BigNumberish,
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      _includeSponsorTokenBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lotCollector(overrides?: CallOverrides): Promise<[string]>;

    lotRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    numPredict(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    participateRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    predict(
      _eventId: BigNumberish,
      _options: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        predictionAmount: BigNumber;
        numPredict: BigNumber;
        predictOptions: string;
        claimed: boolean;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventData(
      _eventData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBNB(
      _feeBNB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeLot(
      _lotRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotCollector(
      _lotCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNumPredict(
      _numPredict: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardSponsorToken(
      _isRewardSponsorToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSponsorTotal(
      _eventId: BigNumberish,
      _saToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bnbRate(overrides?: CallOverrides): Promise<BigNumber>;

  burnWallet(overrides?: CallOverrides): Promise<string>;

  calculateReward(
    _eventId: BigNumberish,
    _user: string,
    _token: string,
    _saToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _reward: BigNumber;
      _totalCorrect: BigNumber;
      _sponsorReward: BigNumber;
    }
  >;

  calculateTest(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reward: BigNumber; _sponsorReward: BigNumber }
  >;

  claimReward(
    _eventId: BigNumberish,
    _token: string,
    _saToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventData(overrides?: CallOverrides): Promise<string>;

  feeBNB(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feeEFUN(overrides?: CallOverrides): Promise<BigNumber>;

  getEventInfo(
    eventId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<GDataTypes.GroupPredictStatsStructOutput>;

  getPredictInfo(
    eventId: BigNumberish,
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<GDataTypes.GroupPredictionStructOutput>;

  getSponsorToken(
    eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSponsorTotal(
    eventId: BigNumberish,
    _saToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  includeSponsorTokenBack(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _burnWallet: string,
    _numPredict: BigNumberish,
    _participateRate: BigNumberish,
    _oneHundredPrecent: BigNumberish,
    _includeSponsorTokenBack: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lotCollector(overrides?: CallOverrides): Promise<string>;

  lotRate(overrides?: CallOverrides): Promise<BigNumber>;

  numPredict(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  participateRate(overrides?: CallOverrides): Promise<BigNumber>;

  predict(
    _eventId: BigNumberish,
    _options: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictions(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      predictionAmount: BigNumber;
      numPredict: BigNumber;
      predictOptions: string;
      claimed: boolean;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setBnbRate(
    _bnbRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventData(
    _eventData: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBNB(
    _feeBNB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeEFUN(
    _feeEFUN: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeLot(
    _lotRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotCollector(
    _lotCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNumPredict(
    _numPredict: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardSponsorToken(
    _isRewardSponsorToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardToken(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSponsorTotal(
    _eventId: BigNumberish,
    _saToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bnbRate(overrides?: CallOverrides): Promise<BigNumber>;

    burnWallet(overrides?: CallOverrides): Promise<string>;

    calculateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _reward: BigNumber;
        _totalCorrect: BigNumber;
        _sponsorReward: BigNumber;
      }
    >;

    calculateTest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reward: BigNumber; _sponsorReward: BigNumber }
    >;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    eventData(overrides?: CallOverrides): Promise<string>;

    feeBNB(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feeEFUN(overrides?: CallOverrides): Promise<BigNumber>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<GDataTypes.GroupPredictStatsStructOutput>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<GDataTypes.GroupPredictionStructOutput>;

    getSponsorToken(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSponsorTotal(
      eventId: BigNumberish,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    includeSponsorTokenBack(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _burnWallet: string,
      _numPredict: BigNumberish,
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      _includeSponsorTokenBack: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    lotCollector(overrides?: CallOverrides): Promise<string>;

    lotRate(overrides?: CallOverrides): Promise<BigNumber>;

    numPredict(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    participateRate(overrides?: CallOverrides): Promise<BigNumber>;

    predict(
      _eventId: BigNumberish,
      _options: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        predictionAmount: BigNumber;
        numPredict: BigNumber;
        predictOptions: string;
        claimed: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventData(_eventData: string, overrides?: CallOverrides): Promise<void>;

    setFeeBNB(_feeBNB: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeLot(_lotRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLotCollector(
      _lotCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumPredict(
      _numPredict: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardSponsorToken(
      _isRewardSponsorToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSponsorTotal(
      _eventId: BigNumberish,
      _saToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PredictionCreated(uint256,string,address,uint256)"(
      eventId?: null,
      options?: null,
      token?: null,
      amount?: null
    ): PredictionCreatedEventFilter;
    PredictionCreated(
      eventId?: null,
      options?: null,
      token?: null,
      amount?: null
    ): PredictionCreatedEventFilter;

    "RewardClaimed(uint256,address,uint256)"(
      eventId?: null,
      token?: null,
      reward?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      eventId?: null,
      token?: null,
      reward?: null
    ): RewardClaimedEventFilter;
  };

  estimateGas: {
    bnbRate(overrides?: CallOverrides): Promise<BigNumber>;

    burnWallet(overrides?: CallOverrides): Promise<BigNumber>;

    calculateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTest(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _saToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventData(overrides?: CallOverrides): Promise<BigNumber>;

    feeBNB(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feeEFUN(overrides?: CallOverrides): Promise<BigNumber>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSponsorToken(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSponsorTotal(
      eventId: BigNumberish,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    includeSponsorTokenBack(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _burnWallet: string,
      _numPredict: BigNumberish,
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      _includeSponsorTokenBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lotCollector(overrides?: CallOverrides): Promise<BigNumber>;

    lotRate(overrides?: CallOverrides): Promise<BigNumber>;

    numPredict(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    participateRate(overrides?: CallOverrides): Promise<BigNumber>;

    predict(
      _eventId: BigNumberish,
      _options: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventData(
      _eventData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBNB(
      _feeBNB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeLot(
      _lotRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotCollector(
      _lotCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNumPredict(
      _numPredict: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardSponsorToken(
      _isRewardSponsorToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSponsorTotal(
      _eventId: BigNumberish,
      _saToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bnbRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateReward(
      _eventId: BigNumberish,
      _user: string,
      _token: string,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _eventId: BigNumberish,
      _token: string,
      _saToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeEFUN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEventInfo(
      eventId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPredictInfo(
      eventId: BigNumberish,
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSponsorToken(
      eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSponsorTotal(
      eventId: BigNumberish,
      _saToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    includeSponsorTokenBack(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _burnWallet: string,
      _numPredict: BigNumberish,
      _participateRate: BigNumberish,
      _oneHundredPrecent: BigNumberish,
      _includeSponsorTokenBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lotCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPredict(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participateRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predict(
      _eventId: BigNumberish,
      _options: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictions(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBnbRate(
      _bnbRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventData(
      _eventData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBNB(
      _feeBNB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeEFUN(
      _feeEFUN: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeLot(
      _lotRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotCollector(
      _lotCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNumPredict(
      _numPredict: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardSponsorToken(
      _isRewardSponsorToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSponsorTotal(
      _eventId: BigNumberish,
      _saToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
