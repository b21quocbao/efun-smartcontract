/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace GDataTypes {
  export type ScoreStruct = {
    firstTeam: BigNumberish;
    secondTeam: BigNumberish;
  };

  export type ScoreStructOutput = [BigNumber, BigNumber] & {
    firstTeam: BigNumber;
    secondTeam: BigNumber;
  };

  export type MatchStruct = {
    description: BytesLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    score: GDataTypes.ScoreStruct;
    status: BigNumberish;
    sToken: string;
    sTotal: BigNumberish;
  };

  export type MatchStructOutput = [
    string,
    BigNumber,
    BigNumber,
    GDataTypes.ScoreStructOutput,
    number,
    string,
    BigNumber
  ] & {
    description: string;
    startTime: BigNumber;
    endTime: BigNumber;
    score: GDataTypes.ScoreStructOutput;
    status: number;
    sToken: string;
    sTotal: BigNumber;
  };
}

export interface GRMatchInterface extends utils.Interface {
  functions: {
    "info(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "info"): FunctionFragment;

  encodeFunctionData(functionFragment: "info", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;

  events: {};
}

export interface GRMatch extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GRMatchInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [GDataTypes.MatchStructOutput] & { _match: GDataTypes.MatchStructOutput }
    >;
  };

  info(
    _matchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GDataTypes.MatchStructOutput>;

  callStatic: {
    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GDataTypes.MatchStructOutput>;
  };

  filters: {};

  estimateGas: {
    info(_matchId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    info(
      _matchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
