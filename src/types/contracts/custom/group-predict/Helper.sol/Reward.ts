/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace EDataTypes {
  export type PredictionStruct = {
    predictionAmount: BigNumberish;
    numPredict: BigNumberish;
    predictOptions: string;
    claimed: boolean;
  };

  export type PredictionStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    predictionAmount: BigNumber;
    numPredict: BigNumber;
    predictOptions: string;
    claimed: boolean;
  };
}

export interface RewardInterface extends utils.Interface {
  functions: {
    "calculateReward(address,uint256,uint256,uint256,(uint256,uint256,string,bool))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "calculateReward"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      EDataTypes.PredictionStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface Reward extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateReward(
      _eventDataAddress: string,
      _eventId: BigNumberish,
      _predictStats: BigNumberish,
      _predictOptionStats: BigNumberish,
      _predictions: EDataTypes.PredictionStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reward: BigNumber; _sponsorReward: BigNumber }
    >;
  };

  calculateReward(
    _eventDataAddress: string,
    _eventId: BigNumberish,
    _predictStats: BigNumberish,
    _predictOptionStats: BigNumberish,
    _predictions: EDataTypes.PredictionStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reward: BigNumber; _sponsorReward: BigNumber }
  >;

  callStatic: {
    calculateReward(
      _eventDataAddress: string,
      _eventId: BigNumberish,
      _predictStats: BigNumberish,
      _predictOptionStats: BigNumberish,
      _predictions: EDataTypes.PredictionStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reward: BigNumber; _sponsorReward: BigNumber }
    >;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    calculateReward(
      _eventDataAddress: string,
      _eventId: BigNumberish,
      _predictStats: BigNumberish,
      _predictOptionStats: BigNumberish,
      _predictions: EDataTypes.PredictionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateReward(
      _eventDataAddress: string,
      _eventId: BigNumberish,
      _predictStats: BigNumberish,
      _predictOptionStats: BigNumberish,
      _predictions: EDataTypes.PredictionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
